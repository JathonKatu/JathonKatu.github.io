{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"2ee55490f85a5c424abc19e206930f38d75a3706","modified":1758289681299},{"_id":"themes/landscape/.npmignore","hash":"4c40eab00f24304ca400313319c58d461788ff5e","modified":1758252604854},{"_id":"themes/landscape/README.md","hash":"e32630175e6d84257c242fd942e39c772fd429da","modified":1758252604855},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1758252604854},{"_id":"themes/landscape/_config.yml","hash":"1d42cdc1e7854dd091c8d306f95c4c502d2071de","modified":1758252604855},{"_id":"themes/landscape/.gitignore","hash":"dde61fc2d985d9256a5041e55b285d6803b9010d","modified":1758252604854},{"_id":"themes/landscape/.github/dependabot.yml","hash":"055a7e8776cb1e01c2c489fee80f3e51472a683c","modified":1758252604831},{"_id":"themes/landscape/package.json","hash":"ec6646daaa2795a4fb153673e346660ecd639531","modified":1758252604935},{"_id":"themes/landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1758252604856},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1758252604856},{"_id":"themes/landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1758252604856},{"_id":"themes/landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1758252604856},{"_id":"themes/landscape/languages/en.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1758252604888},{"_id":"themes/landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1758252604857},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1758252604888},{"_id":"themes/landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1758252604888},{"_id":"themes/landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1758252604888},{"_id":"themes/landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1758252604889},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1758252604888},{"_id":"themes/landscape/languages/hu.yml","hash":"d22ec72d00567db3782661ab5ccdb2475469da4c","modified":1758252604889},{"_id":"themes/landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1758252604889},{"_id":"themes/landscape/languages/it.yml","hash":"7f09aa0520688e2de50cb5b6631998682f9200f5","modified":1758252604889},{"_id":"themes/landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1758252604890},{"_id":"themes/landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1758252604892},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1758252604893},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1758252604891},{"_id":"themes/landscape/languages/mn.yml","hash":"088c2507d8f221416f99cf72d73641ba476a0f00","modified":1758252604895},{"_id":"themes/landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1758252604894},{"_id":"themes/landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1758252604896},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1758252604898},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1758252604897},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1758252604900},{"_id":"themes/landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1758252604899},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1758252604901},{"_id":"themes/landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1758252604901},{"_id":"themes/landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1758252604900},{"_id":"themes/landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1758252604901},{"_id":"themes/landscape/layout/archive.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1758252604932},{"_id":"themes/landscape/languages/tr.yml","hash":"424f6e94ced575b51bb7dcebdc0f25d4f4c99fe2","modified":1758252604901},{"_id":"themes/landscape/layout/category.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1758252604933},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1758252604902},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"e41d1e0e3a9e15c30b7142491bed39dc50371e96","modified":1758252604902},{"_id":"themes/landscape/scripts/fancybox.js","hash":"113012153240fa62a2dffc85b1dd6a476609670a","modified":1758252604935},{"_id":"themes/landscape/layout/index.ejs","hash":"57281fc3812c877ec2d8e89ec87ede57b9789d4c","modified":1758252604933},{"_id":"themes/landscape/layout/layout.ejs","hash":"99ad49cb7ee932c62ab0ef3a4de71f7e7e8c6bed","modified":1758252604933},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1758252604934},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1758252604935},{"_id":"themes/landscape/.github/workflows/deploy.yml","hash":"b799ce8c96f9dac93b32684c3ca1d92de2ede567","modified":1758252604831},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1758252604902},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"0111bb3084675d00664342c03e2020de520473fc","modified":1758252604902},{"_id":"themes/landscape/layout/tag.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1758252604935},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"165008f72ed77f0da879d132563d763369d26472","modified":1758252604904},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"f8791a133bb45633e58b198db9959e2f873ee641","modified":1758252604903},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"47e22ba6c0ebb47bbcd788cc1a1a1ddaadc244e0","modified":1758252604903},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"9fc18f1fd5bec16f8a3d30b0ce38458485c398b3","modified":1758252604904},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"403e107162a13bd8db2fc97f2f85df5b235f9308","modified":1758252604904},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1758252604929},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1758252604931},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"892a5b524a508f395f6d72cb6721f0a3db14d4d7","modified":1758252604929},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"50e7a7de24edc42e96cc4adae17c38e059781f1b","modified":1758252604905},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1758252604931},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1758252604945},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"98c85af1103af18b02c4f5f207fdfc48e207d794","modified":1758252604932},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1758252604932},{"_id":"themes/landscape/source/css/_variables.styl","hash":"a4b3530798b0a7a23d31fb0b86b530fcc2fce87a","modified":1758252604941},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1758252604932},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1758252604932},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1758252604935},{"_id":"themes/landscape/source/css/style.styl","hash":"15535c222f5a689c255c77722d2334bb1ac97a7e","modified":1758252604944},{"_id":"themes/landscape/source/js/script.js","hash":"0b5bd5ce6783a733607a62c5273486d8893571c6","modified":1758252604947},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1758252604930},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"e78bda05fcf57b0e5e3a20cf3505d37fd69aaf46","modified":1758252604930},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1758252604930},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1758252604930},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1758252604931},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1758252604937},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"02f477f2ff75b4076e3479d9e291b75a5a2f2bcb","modified":1758252604937},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1758252604938},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"04838b4b2ca4788700c48449e5fb6790d18c0f2e","modified":1758252604939},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1758252604938},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"403c39c7bb1caa1f3b142207b59aa0567f898a31","modified":1758252604939},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1758252604940},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1758252604940},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1758252604939},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1758252604940},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1758252604940},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1758252604941},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"fd5d3187f4e3d45f8af08f93b263fca7ed666c75","modified":1758252604931},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.min.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1758252604945},{"_id":"themes/landscape/source/js/jquery-3.6.4.min.js","hash":"edf8a6a066f201b1ffad32c585bd79c9982d4433","modified":1758252604946},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1758252604944},{"_id":"public/2025/09/19/hello-world/index.html","hash":"2eec626a8a4410c81d47d23006a0d7916be63ba8","modified":1758293095921},{"_id":"public/archives/index.html","hash":"e6442ec2f445804f2047f305d913a04f19cbbe7c","modified":1758293095921},{"_id":"public/archives/2025/index.html","hash":"a1c7858974a4dce4dd0c5e34093cad7203a82094","modified":1758293095921},{"_id":"public/archives/2025/09/index.html","hash":"2e8e0e6c71aa82755bedeefb8e0aa2b985141828","modified":1758293095921},{"_id":"public/categories/日记/index.html","hash":"8b6a76b5f677dbdd4d7eb8bdc2827c379a1faa6a","modified":1758293095921},{"_id":"public/index.html","hash":"5c87511db40ccd6f12b95a57117dfccaf9da8b8b","modified":1758293095921},{"_id":"public/tags/Hexo/index.html","hash":"18fd9ee0af4294cf5a86a9033438c3d680d66da4","modified":1758293095921},{"_id":"public/tags/博客/index.html","hash":"c76b653363a8381081a655435a1b46a261807dda","modified":1758252791634},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1758293095921},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1758293095921},{"_id":"public/css/style.css","hash":"ecc329be740a220cc188ff49b02da4847cb7ee5e","modified":1758293095921},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1758293095921},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1758293095921},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1758293095921},{"_id":"public/tags/Java/index.html","hash":"9c4aa33a83a03e45c5fc28f392598a38e7b10fae","modified":1758293095921},{"_id":"public/tags/Python/index.html","hash":"fc7b25eea840c974388354cfe18704e3c471e926","modified":1758252791634},{"_id":"public/tags/AI/index.html","hash":"5d7cb0f203c67a1b2e3dd28b5df6352aa4cb0185","modified":1758252791634},{"_id":"source/_posts/RocketMQ延时MQ的原理阅读.md","hash":"db68b193acdbbe42a437920a0a8f300b56a557ee","modified":1758289406691},{"_id":"source/_drafts/todo-list.md","hash":"dbc3ffb44ac1a70b3a8574bc6b08f5723db0ce04","modified":1758289976593},{"_id":"public/2025/09/19/RocketMQ延时MQ的原理阅读/index.html","hash":"f7d85b102e07ec8428eaa50a017804b81b1d0e2a","modified":1758293095921},{"_id":"public/tags/RocketMQ/index.html","hash":"0949bc29f15faa862ea67d22fce7158972e56e1f","modified":1758293095921},{"_id":"public/tags/分布式/index.html","hash":"5acd8f5e0fe34595828a27fb3f0e99bb19d3e79f","modified":1758293095921},{"_id":"public/tags/架构/index.html","hash":"b7654074ca88eaa169714b57ff23f3e07c64a41c","modified":1758293095921},{"_id":"public/tags/消息队列/index.html","hash":"1fb88f6532d8e891f164968082d0b15c0898f584","modified":1758293095921},{"_id":"public/tags/源码/index.html","hash":"de866d0d136c64b09ace2e6ebccb1126614b8639","modified":1758293095921},{"_id":"public/categories/技术分享/学习记录/index.html","hash":"5955dae408dea05f7efac0adb7b27e16ef1f8c6c","modified":1758293095921},{"_id":"public/categories/技术分享/index.html","hash":"b47a1d319a49d503effd8d97307cb8477c86e748","modified":1758293095921}],"Category":[{"name":"日记","_id":"cmfqa7j9q0001k4u7dcu13wqm"},{"name":"技术分享","_id":"cmfqf6qtl0001kgu7gr5da4wd"},{"name":"学习记录","parent":"cmfqf6qtl0001kgu7gr5da4wd","_id":"cmfqf6qtn0004kgu77vo0bvzo"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","date":"2025-09-19T03:30:00.000Z","_content":"\n欢迎来到我的全新Hexo博客！\n\n这是一个全新开始的技术博客，我将在这里分享：\n\n## 主要内容\n\n- **Java开发** - 源码分析、Spring生态、微服务架构、JVM调优\n- **Python编程** - 基础语法、数据分析、机器学习、深度学习框架\n- **网络安全** - 入侵检测、安全防护、渗透测试、安全架构设计\n- **分布式系统** - 微服务架构、服务治理、分布式事务、高可用设计\n- **系统架构** - 架构设计模式、性能优化、容器化部署、云原生\n- **人工智能** - 机器学习算法、深度学习、自然语言处理、计算机视觉\n- **数据库技术** - SQL优化、NoSQL、分布式数据库、数据仓库\n- **开发工具** - Git使用、IDE配置、CI/CD、DevOps实践\n\n## 博客特色\n\n✨ **技术深度** - 不仅仅是使用，更注重原理理解和源码分析  \n🚀 **实战导向** - 结合实际项目经验，分享架构设计和解决方案  \n📚 **持续学习** - 记录学习过程，分享前沿技术趋势  \n🔧 **工具分享** - 推荐好用的开发工具和最佳实践  \n🏗️ **架构思维** - 从单体到微服务，从传统到云原生的架构演进  \n🤖 **AI探索** - 人工智能在实际业务中的应用和实践  \n\n## 联系方式\n\n如果你对文章内容有任何疑问或建议，欢迎通过以下方式联系我：\n\n- GitHub: [JathonKatu](https://github.com/JathonKatu)\n- Email: jathonkatu@foxmail.com\n\n让我们一起在技术的道路上不断前进！🎯","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2025-09-19 11:30:00\ntags: [Hexo]\ncategories: [日记]\n---\n\n欢迎来到我的全新Hexo博客！\n\n这是一个全新开始的技术博客，我将在这里分享：\n\n## 主要内容\n\n- **Java开发** - 源码分析、Spring生态、微服务架构、JVM调优\n- **Python编程** - 基础语法、数据分析、机器学习、深度学习框架\n- **网络安全** - 入侵检测、安全防护、渗透测试、安全架构设计\n- **分布式系统** - 微服务架构、服务治理、分布式事务、高可用设计\n- **系统架构** - 架构设计模式、性能优化、容器化部署、云原生\n- **人工智能** - 机器学习算法、深度学习、自然语言处理、计算机视觉\n- **数据库技术** - SQL优化、NoSQL、分布式数据库、数据仓库\n- **开发工具** - Git使用、IDE配置、CI/CD、DevOps实践\n\n## 博客特色\n\n✨ **技术深度** - 不仅仅是使用，更注重原理理解和源码分析  \n🚀 **实战导向** - 结合实际项目经验，分享架构设计和解决方案  \n📚 **持续学习** - 记录学习过程，分享前沿技术趋势  \n🔧 **工具分享** - 推荐好用的开发工具和最佳实践  \n🏗️ **架构思维** - 从单体到微服务，从传统到云原生的架构演进  \n🤖 **AI探索** - 人工智能在实际业务中的应用和实践  \n\n## 联系方式\n\n如果你对文章内容有任何疑问或建议，欢迎通过以下方式联系我：\n\n- GitHub: [JathonKatu](https://github.com/JathonKatu)\n- Email: jathonkatu@foxmail.com\n\n让我们一起在技术的道路上不断前进！🎯","slug":"hello-world","published":1,"updated":"2025-09-19T13:48:01.299Z","_id":"cmfqa7j9n0000k4u7eg5zauep","comments":1,"layout":"post","photos":[],"content":"<p>欢迎来到我的全新Hexo博客！</p>\n<p>这是一个全新开始的技术博客，我将在这里分享：</p>\n<h2 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h2><ul>\n<li><strong>Java开发</strong> - 源码分析、Spring生态、微服务架构、JVM调优</li>\n<li><strong>Python编程</strong> - 基础语法、数据分析、机器学习、深度学习框架</li>\n<li><strong>网络安全</strong> - 入侵检测、安全防护、渗透测试、安全架构设计</li>\n<li><strong>分布式系统</strong> - 微服务架构、服务治理、分布式事务、高可用设计</li>\n<li><strong>系统架构</strong> - 架构设计模式、性能优化、容器化部署、云原生</li>\n<li><strong>人工智能</strong> - 机器学习算法、深度学习、自然语言处理、计算机视觉</li>\n<li><strong>数据库技术</strong> - SQL优化、NoSQL、分布式数据库、数据仓库</li>\n<li><strong>开发工具</strong> - Git使用、IDE配置、CI&#x2F;CD、DevOps实践</li>\n</ul>\n<h2 id=\"博客特色\"><a href=\"#博客特色\" class=\"headerlink\" title=\"博客特色\"></a>博客特色</h2><p>✨ <strong>技术深度</strong> - 不仅仅是使用，更注重原理理解和源码分析<br>🚀 <strong>实战导向</strong> - 结合实际项目经验，分享架构设计和解决方案<br>📚 <strong>持续学习</strong> - 记录学习过程，分享前沿技术趋势<br>🔧 <strong>工具分享</strong> - 推荐好用的开发工具和最佳实践<br>🏗️ <strong>架构思维</strong> - 从单体到微服务，从传统到云原生的架构演进<br>🤖 <strong>AI探索</strong> - 人工智能在实际业务中的应用和实践  </p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p>如果你对文章内容有任何疑问或建议，欢迎通过以下方式联系我：</p>\n<ul>\n<li>GitHub: <a href=\"https://github.com/JathonKatu\">JathonKatu</a></li>\n<li>Email: <a href=\"mailto:&#106;&#97;&#116;&#104;&#x6f;&#x6e;&#107;&#x61;&#x74;&#x75;&#x40;&#x66;&#x6f;&#120;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;\">jathonkatu@foxmail.com</a></li>\n</ul>\n<p>让我们一起在技术的道路上不断前进！🎯</p>\n","excerpt":"","more":"<p>欢迎来到我的全新Hexo博客！</p>\n<p>这是一个全新开始的技术博客，我将在这里分享：</p>\n<h2 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h2><ul>\n<li><strong>Java开发</strong> - 源码分析、Spring生态、微服务架构、JVM调优</li>\n<li><strong>Python编程</strong> - 基础语法、数据分析、机器学习、深度学习框架</li>\n<li><strong>网络安全</strong> - 入侵检测、安全防护、渗透测试、安全架构设计</li>\n<li><strong>分布式系统</strong> - 微服务架构、服务治理、分布式事务、高可用设计</li>\n<li><strong>系统架构</strong> - 架构设计模式、性能优化、容器化部署、云原生</li>\n<li><strong>人工智能</strong> - 机器学习算法、深度学习、自然语言处理、计算机视觉</li>\n<li><strong>数据库技术</strong> - SQL优化、NoSQL、分布式数据库、数据仓库</li>\n<li><strong>开发工具</strong> - Git使用、IDE配置、CI&#x2F;CD、DevOps实践</li>\n</ul>\n<h2 id=\"博客特色\"><a href=\"#博客特色\" class=\"headerlink\" title=\"博客特色\"></a>博客特色</h2><p>✨ <strong>技术深度</strong> - 不仅仅是使用，更注重原理理解和源码分析<br>🚀 <strong>实战导向</strong> - 结合实际项目经验，分享架构设计和解决方案<br>📚 <strong>持续学习</strong> - 记录学习过程，分享前沿技术趋势<br>🔧 <strong>工具分享</strong> - 推荐好用的开发工具和最佳实践<br>🏗️ <strong>架构思维</strong> - 从单体到微服务，从传统到云原生的架构演进<br>🤖 <strong>AI探索</strong> - 人工智能在实际业务中的应用和实践  </p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p>如果你对文章内容有任何疑问或建议，欢迎通过以下方式联系我：</p>\n<ul>\n<li>GitHub: <a href=\"https://github.com/JathonKatu\">JathonKatu</a></li>\n<li>Email: <a href=\"mailto:&#106;&#97;&#116;&#104;&#x6f;&#x6e;&#107;&#x61;&#x74;&#x75;&#x40;&#x66;&#x6f;&#120;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;\">jathonkatu@foxmail.com</a></li>\n</ul>\n<p>让我们一起在技术的道路上不断前进！🎯</p>\n"},{"title":"RocketMQ延时MQ的原理阅读","date":"2025-09-19T03:44:41.000Z","_content":"status: draft\ncreateDate: 2025-09-19 11:44:41\nendDate: \n\n## 目录\n- [RocketMQ 4.X的延时MQ现状](#rocketMQ4.x-now)☑️\n- [RocketMQ 4.X的延时MQ原理解析](#rocketMQ4.x-principle)☑️\n- [RocketMQ 4.X的延时MQ源码解析](#rocketMQ4.x-code)☑️\n- [RocketMQ 5.X的延时MQ现状](#rocketMQ5.x-now)☑️\n- [RocketMQ 5.X的延时MQ原理解析](#rocketMQ5.x-principle)⬜\n- [RocketMQ 5.X的延时MQ源码解析](#rocketMQ5.x-code)⬜\n- [写在最后](#write-end)\n\n\n\n### <span id=\"rocketMQ4.x-now\"> RocketMQ 4.X的延时MQ现状 </span> [官方文档](https://rocketmq.apache.org/zh/docs/4.x/producer/04message3/)\n- 字段message.delayTimeLevel\n- 枚举为数字1-18，只支持18个固定延时等级（1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h）\n\n### <span id=\"rocketMQ4.x-principle\"> RocketMQ 4.X的延时MQ原理解析 </span>\n底层实现主要是基于Broke端，主要涉及以下组件：\n1. **CommitLog 写入处**\n    当消息带有delayTimeLevel > 0时，在CommitLog#asyncPutMessage方法中会进行特殊处理(老版本是CommitLog#putMessage)\n    - 将原始的topic和queueId保存到消息属性中(REAL_TOPIC、REAL_QUEUE_ID)\n    - 修改消息的topic为系统预设的延迟topic(SCHEDULE_TOPIC_XXXX)\n    - 根据延迟级别计算出对应的queueId [ScheduleMessageService#delayLevel2QueueId](https://github.com/apache/rocketmq/blob/4.9.x/store/src/main/java/org/apache/rocketmq/store/schedule/ScheduleMessageService.java#L91)并投放到对应的queue中\n2. **定时调度服务ScheduleMessageService**\n    该服务负责扫描延迟队列中的消息，并在到期后将其重新投递到原始的topic\n    - 启动时为每一个延迟级别的queue创建一个定时任务\n    - 定期检查每个延迟队列的消息是否到期(上一步会计算当前时间，并根据延迟等级计算出到期时间，注意超出18会默认18)\n    - 到期后，恢复原始topic和queueId，重新构建消息并写入CommitLog，进入正常消费流程。\n3. **关键源码**\n    - <span id=\"SendMessageProcessor#asyncProcessRequest.back\">[org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncProcessRequest](#SendMessageProcessor#asyncProcessRequest)</span>\n    - <span id=\"SendMessageProcessor#asyncSendMessage.back\">[org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncSendMessage](#SendMessageProcessor#asyncSendMessage)</span>\n    - <span id=\"CommitLog#asyncPutMessage.back\">[org.apache.rocketmq.store.CommitLog#asyncPutMessage](#CommitLog#asyncPutMessage)</span>\n    - <span id=\"ScheduleMessageService#start.back\">[org.apache.rocketmq.store.schedule.ScheduleMessageService#start](#ScheduleMessageService#start)</span>\n    - <span id=\"DeliverDelayedMessageTimerTask.back\">[org.apache.rocketmq.store.schedule.ScheduleMessageService.DeliverDelayedMessageTimerTask](#DeliverDelayedMessageTimerTask)</span>\n\n### <span id=\"rocketMQ4.x-code\"> RocketMQ 4.X的延时MQ源码解析 </span>\n#### <span id=\"SendMessageProcessor#asyncProcessRequest\">[org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncProcessRequest](#SendMessageProcessor#asyncProcessRequest.back)</span>\n首先是收到的消息先通过这个方法进行转发处理，主要是第17行代码提供入口。\n```java\npublic CompletableFuture<RemotingCommand> asyncProcessRequest(ChannelHandlerContext ctx,\n                                                                  RemotingCommand request) throws RemotingCommandException {\n        final SendMessageContext mqtraceContext;\n        switch (request.getCode()) {\n            case RequestCode.CONSUMER_SEND_MSG_BACK:\n                return this.asyncConsumerSendMsgBack(ctx, request);\n            default:\n                SendMessageRequestHeader requestHeader = parseRequestHeader(request);\n                if (requestHeader == null) {\n                    return CompletableFuture.completedFuture(null);\n                }\n                mqtraceContext = buildMsgContext(ctx, requestHeader);\n                this.executeSendMessageHookBefore(ctx, request, mqtraceContext);\n                if (requestHeader.isBatch()) {\n                    return this.asyncSendBatchMessage(ctx, request, mqtraceContext, requestHeader);\n                } else {\n                    return this.asyncSendMessage(ctx, request, mqtraceContext, requestHeader);\n                }\n        }\n    }\n```\n#### <span id=\"SendMessageProcessor#asyncSendMessage\">[org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncSendMessage](#SendMessageProcessor#asyncSendMessage.back)</span>\n这里主要的是关注第61行代码，进入到Strore，运行asyncPutMessage。\n```java\nprivate CompletableFuture<RemotingCommand> asyncSendMessage(ChannelHandlerContext ctx, RemotingCommand request,\n                                                                SendMessageContext mqtraceContext,\n                                                                SendMessageRequestHeader requestHeader) {\n        final RemotingCommand response = preSend(ctx, request, requestHeader);\n        final SendMessageResponseHeader responseHeader = (SendMessageResponseHeader)response.readCustomHeader();\n\n        if (response.getCode() != -1) {\n            return CompletableFuture.completedFuture(response);\n        }\n\n        final byte[] body = request.getBody();\n\n        int queueIdInt = requestHeader.getQueueId();\n        TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());\n\n        if (queueIdInt < 0) {\n            queueIdInt = randomQueueId(topicConfig.getWriteQueueNums());\n        }\n\n        MessageExtBrokerInner msgInner = new MessageExtBrokerInner();\n        msgInner.setTopic(requestHeader.getTopic());\n        msgInner.setQueueId(queueIdInt);\n\n        if (!handleRetryAndDLQ(requestHeader, response, request, msgInner, topicConfig)) {\n            return CompletableFuture.completedFuture(response);\n        }\n\n        msgInner.setBody(body);\n        msgInner.setFlag(requestHeader.getFlag());\n        Map<String, String> origProps = MessageDecoder.string2messageProperties(requestHeader.getProperties());\n        MessageAccessor.setProperties(msgInner, origProps);\n        msgInner.setBornTimestamp(requestHeader.getBornTimestamp());\n        msgInner.setBornHost(ctx.channel().remoteAddress());\n        msgInner.setStoreHost(this.getStoreHost());\n        msgInner.setReconsumeTimes(requestHeader.getReconsumeTimes() == null ? 0 : requestHeader.getReconsumeTimes());\n        String clusterName = this.brokerController.getBrokerConfig().getBrokerClusterName();\n        MessageAccessor.putProperty(msgInner, MessageConst.PROPERTY_CLUSTER, clusterName);\n        if (origProps.containsKey(MessageConst.PROPERTY_WAIT_STORE_MSG_OK)) {\n            // There is no need to store \"WAIT=true\", remove it from propertiesString to save 9 bytes for each message.\n            // It works for most case. In some cases msgInner.setPropertiesString invoked later and replace it.\n            String waitStoreMsgOKValue = origProps.remove(MessageConst.PROPERTY_WAIT_STORE_MSG_OK);\n            msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));\n            // Reput to properties, since msgInner.isWaitStoreMsgOK() will be invoked later\n            origProps.put(MessageConst.PROPERTY_WAIT_STORE_MSG_OK, waitStoreMsgOKValue);\n        } else {\n            msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));\n        }\n\n        CompletableFuture<PutMessageResult> putMessageResult = null;\n        String transFlag = origProps.get(MessageConst.PROPERTY_TRANSACTION_PREPARED);\n        if (Boolean.parseBoolean(transFlag)) {\n            if (this.brokerController.getBrokerConfig().isRejectTransactionMessage()) {\n                response.setCode(ResponseCode.NO_PERMISSION);\n                response.setRemark(\n                        \"the broker[\" + this.brokerController.getBrokerConfig().getBrokerIP1()\n                                + \"] sending transaction message is forbidden\");\n                return CompletableFuture.completedFuture(response);\n            }\n            putMessageResult = this.brokerController.getTransactionalMessageService().asyncPrepareMessage(msgInner);\n        } else {\n            putMessageResult = this.brokerController.getMessageStore().asyncPutMessage(msgInner);\n        }\n        return handlePutMessageResultFuture(putMessageResult, response, request, msgInner, responseHeader, mqtraceContext, ctx, queueIdInt);\n    }\n```\n\n#### <span id=\"CommitLog#asyncPutMessage\">[org.apache.rocketmq.store.CommitLog#asyncPutMessage](#CommitLog#asyncPutMessage.back)</span>\nputMessage的过程中会进行判断，主要看第十八行开始，如果是延迟mq，则会将消息放入到topic=SCHEDULE_TOPIC_XXXX,queueId=delayLevel-1中\n```java\npublic CompletableFuture<PutMessageResult> asyncPutMessage(final MessageExtBrokerInner msg) {\n        // Set the storage time\n        msg.setStoreTimestamp(System.currentTimeMillis());\n        // Set the message body BODY CRC (consider the most appropriate setting\n        // on the client)\n        msg.setBodyCRC(UtilAll.crc32(msg.getBody()));\n        // Back to Results\n        AppendMessageResult result = null;\n\n        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n\n        String topic = msg.getTopic();\n//        int queueId msg.getQueueId();\n        final int tranType = MessageSysFlag.getTransactionValue(msg.getSysFlag());\n        if (tranType == MessageSysFlag.TRANSACTION_NOT_TYPE\n                || tranType == MessageSysFlag.TRANSACTION_COMMIT_TYPE) {\n            // Delay Delivery\n            if (msg.getDelayTimeLevel() > 0) {\n                if (msg.getDelayTimeLevel() > this.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel()) {\n                    msg.setDelayTimeLevel(this.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel());\n                }\n\n                topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n                int queueId = ScheduleMessageService.delayLevel2QueueId(msg.getDelayTimeLevel());\n\n                // Backup real topic, queueId\n                MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_TOPIC, msg.getTopic());\n                MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_QUEUE_ID, String.valueOf(msg.getQueueId()));\n                msg.setPropertiesString(MessageDecoder.messageProperties2String(msg.getProperties()));\n\n                msg.setTopic(topic);\n                msg.setQueueId(queueId);\n            }\n        }\n\n        InetSocketAddress bornSocketAddress = (InetSocketAddress) msg.getBornHost();\n        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n            msg.setBornHostV6Flag();\n        }\n\n        InetSocketAddress storeSocketAddress = (InetSocketAddress) msg.getStoreHost();\n        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n            msg.setStoreHostAddressV6Flag();\n        }\n\n        PutMessageThreadLocal putMessageThreadLocal = this.putMessageThreadLocal.get();\n        updateMaxMessageSize(putMessageThreadLocal);\n        if (!multiDispatch.isMultiDispatchMsg(msg)) {\n            PutMessageResult encodeResult = putMessageThreadLocal.getEncoder().encode(msg);\n            if (encodeResult != null) {\n                return CompletableFuture.completedFuture(encodeResult);\n            }\n            msg.setEncodedBuff(putMessageThreadLocal.getEncoder().getEncoderBuffer());\n        }\n        PutMessageContext putMessageContext = new PutMessageContext(generateKey(putMessageThreadLocal.getKeyBuilder(), msg));\n\n        long elapsedTimeInLock = 0;\n        MappedFile unlockMappedFile = null;\n\n        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n        try {\n            MappedFile mappedFile = this.mappedFileQueue.getLastMappedFile();\n            long beginLockTimestamp = this.defaultMessageStore.getSystemClock().now();\n            this.beginTimeInLock = beginLockTimestamp;\n\n            // Here settings are stored timestamp, in order to ensure an orderly\n            // global\n            msg.setStoreTimestamp(beginLockTimestamp);\n\n            if (null == mappedFile || mappedFile.isFull()) {\n                mappedFile = this.mappedFileQueue.getLastMappedFile(0); // Mark: NewFile may be cause noise\n            }\n            if (null == mappedFile) {\n                log.error(\"create mapped file1 error, topic: \" + msg.getTopic() + \" clientAddr: \" + msg.getBornHostString());\n                return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.CREATE_MAPEDFILE_FAILED, null));\n            }\n\n            result = mappedFile.appendMessage(msg, this.appendMessageCallback, putMessageContext);\n            switch (result.getStatus()) {\n                case PUT_OK:\n                    break;\n                case END_OF_FILE:\n                    unlockMappedFile = mappedFile;\n                    // Create a new file, re-write the message\n                    mappedFile = this.mappedFileQueue.getLastMappedFile(0);\n                    if (null == mappedFile) {\n                        // XXX: warn and notify me\n                        log.error(\"create mapped file2 error, topic: \" + msg.getTopic() + \" clientAddr: \" + msg.getBornHostString());\n                        return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.CREATE_MAPEDFILE_FAILED, result));\n                    }\n                    result = mappedFile.appendMessage(msg, this.appendMessageCallback, putMessageContext);\n                    break;\n                case MESSAGE_SIZE_EXCEEDED:\n                case PROPERTIES_SIZE_EXCEEDED:\n                    return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, result));\n                case UNKNOWN_ERROR:\n                    return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, result));\n                default:\n                    return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, result));\n            }\n\n            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginLockTimestamp;\n        } finally {\n            beginTimeInLock = 0;\n            putMessageLock.unlock();\n        }\n\n        if (elapsedTimeInLock > 500) {\n            log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\", elapsedTimeInLock, msg.getBody().length, result);\n        }\n\n        if (null != unlockMappedFile && this.defaultMessageStore.getMessageStoreConfig().isWarmMapedFileEnable()) {\n            this.defaultMessageStore.unlockMappedFile(unlockMappedFile);\n        }\n\n        PutMessageResult putMessageResult = new PutMessageResult(PutMessageStatus.PUT_OK, result);\n\n        // Statistics\n        storeStatsService.getSinglePutMessageTopicTimesTotal(msg.getTopic()).add(1);\n        storeStatsService.getSinglePutMessageTopicSizeTotal(topic).add(result.getWroteBytes());\n\n        CompletableFuture<PutMessageStatus> flushResultFuture = submitFlushRequest(result, msg);\n        CompletableFuture<PutMessageStatus> replicaResultFuture = submitReplicaRequest(result, msg);\n        return flushResultFuture.thenCombine(replicaResultFuture, (flushStatus, replicaStatus) -> {\n            if (flushStatus != PutMessageStatus.PUT_OK) {\n                putMessageResult.setPutMessageStatus(flushStatus);\n            }\n            if (replicaStatus != PutMessageStatus.PUT_OK) {\n                putMessageResult.setPutMessageStatus(replicaStatus);\n            }\n            return putMessageResult;\n        });\n    }\n```\n#### <span id=\"ScheduleMessageService#start\">[org.apache.rocketmq.store.schedule.ScheduleMessageService#start](#ScheduleMessageService#start.back)</span>\n这里主要是解释schedule对每一个delayLevel都启动了一个定时任务线程，执行频率根据不同delayLevel对应的deladeliveryTime决定。\n```java\npublic void start() {\n        if (started.compareAndSet(false, true)) {\n            this.load();\n            this.deliverExecutorService = new ScheduledThreadPoolExecutor(this.maxDelayLevel, new ThreadFactoryImpl(\"ScheduleMessageTimerThread_\"));\n            if (this.enableAsyncDeliver) {\n                this.handleExecutorService = new ScheduledThreadPoolExecutor(this.maxDelayLevel, new ThreadFactoryImpl(\"ScheduleMessageExecutorHandleThread_\"));\n            }\n            for (Map.Entry<Integer, Long> entry : this.delayLevelTable.entrySet()) {\n                Integer level = entry.getKey();\n                Long timeDelay = entry.getValue();\n                Long offset = this.offsetTable.get(level);\n                if (null == offset) {\n                    offset = 0L;\n                }\n\n                if (timeDelay != null) {\n                    if (this.enableAsyncDeliver) {\n                        this.handleExecutorService.schedule(new HandlePutResultTask(level), FIRST_DELAY_TIME, TimeUnit.MILLISECONDS);\n                    }\n                    this.deliverExecutorService.schedule(new DeliverDelayedMessageTimerTask(level, offset), FIRST_DELAY_TIME, TimeUnit.MILLISECONDS);\n                }\n            }\n\n            this.deliverExecutorService.scheduleAtFixedRate(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        if (started.get()) {\n                            ScheduleMessageService.this.persist();\n                        }\n                    } catch (Throwable e) {\n                        log.error(\"scheduleAtFixedRate flush exception\", e);\n                    }\n                }\n            }, 10000, this.defaultMessageStore.getMessageStoreConfig().getFlushDelayOffsetInterval(), TimeUnit.MILLISECONDS);\n        }\n    }\n```\n#### <span id=\"DeliverDelayedMessageTimerTask\">[org.apache.rocketmq.store.schedule.ScheduleMessageService.DeliverDelayedMessageTimerTask](#DeliverDelayedMessageTimerTask.back)</span>\ntask主要的任务就是101行，调用org.apache.rocketmq.store.schedule.ScheduleMessageService#messageTimeup，将对象转换成MessageExtBrokerInner对象（并在此时将topic和queueId重置成原来的），然后调用org.apache.rocketmq.store.DefaultMessageStore#putMessage，将消息放入到commitLog中。\n```java\nclass DeliverDelayedMessageTimerTask implements Runnable {\n        private final int delayLevel;\n        private final long offset;\n\n        public DeliverDelayedMessageTimerTask(int delayLevel, long offset) {\n            this.delayLevel = delayLevel;\n            this.offset = offset;\n        }\n\n        @Override\n        public void run() {\n            try {\n                if (isStarted()) {\n                    this.executeOnTimeup();\n                }\n            } catch (Exception e) {\n                // XXX: warn and notify me\n                log.error(\"ScheduleMessageService, executeOnTimeup exception\", e);\n                this.scheduleNextTimerTask(this.offset, DELAY_FOR_A_PERIOD);\n            }\n        }\n\n        /**\n         * @return\n         */\n        private long correctDeliverTimestamp(final long now, final long deliverTimestamp) {\n\n            long result = deliverTimestamp;\n\n            long maxTimestamp = now + ScheduleMessageService.this.delayLevelTable.get(this.delayLevel);\n            if (deliverTimestamp > maxTimestamp) {\n                result = now;\n            }\n\n            return result;\n        }\n\n        public void executeOnTimeup() {\n            ConsumeQueue cq =\n                ScheduleMessageService.this.defaultMessageStore.findConsumeQueue(TopicValidator.RMQ_SYS_SCHEDULE_TOPIC,\n                    delayLevel2QueueId(delayLevel));\n\n            if (cq == null) {\n                this.scheduleNextTimerTask(this.offset, DELAY_FOR_A_WHILE);\n                return;\n            }\n\n            SelectMappedBufferResult bufferCQ = cq.getIndexBuffer(this.offset);\n            if (bufferCQ == null) {\n                long resetOffset;\n                if ((resetOffset = cq.getMinOffsetInQueue()) > this.offset) {\n                    log.error(\"schedule CQ offset invalid. offset={}, cqMinOffset={}, queueId={}\",\n                        this.offset, resetOffset, cq.getQueueId());\n                } else if ((resetOffset = cq.getMaxOffsetInQueue()) < this.offset) {\n                    log.error(\"schedule CQ offset invalid. offset={}, cqMaxOffset={}, queueId={}\",\n                        this.offset, resetOffset, cq.getQueueId());\n                } else {\n                    resetOffset = this.offset;\n                }\n\n                this.scheduleNextTimerTask(resetOffset, DELAY_FOR_A_WHILE);\n                return;\n            }\n\n            long nextOffset = this.offset;\n            try {\n                int i = 0;\n                ConsumeQueueExt.CqExtUnit cqExtUnit = new ConsumeQueueExt.CqExtUnit();\n                for (; i < bufferCQ.getSize() && isStarted(); i += ConsumeQueue.CQ_STORE_UNIT_SIZE) {\n                    long offsetPy = bufferCQ.getByteBuffer().getLong();\n                    int sizePy = bufferCQ.getByteBuffer().getInt();\n                    long tagsCode = bufferCQ.getByteBuffer().getLong();\n\n                    if (cq.isExtAddr(tagsCode)) {\n                        if (cq.getExt(tagsCode, cqExtUnit)) {\n                            tagsCode = cqExtUnit.getTagsCode();\n                        } else {\n                            //can't find ext content.So re compute tags code.\n                            log.error(\"[BUG] can't find consume queue extend file content!addr={}, offsetPy={}, sizePy={}\",\n                                tagsCode, offsetPy, sizePy);\n                            long msgStoreTime = defaultMessageStore.getCommitLog().pickupStoreTimestamp(offsetPy, sizePy);\n                            tagsCode = computeDeliverTimestamp(delayLevel, msgStoreTime);\n                        }\n                    }\n\n                    long now = System.currentTimeMillis();\n                    long deliverTimestamp = this.correctDeliverTimestamp(now, tagsCode);\n                    nextOffset = offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);\n\n                    long countdown = deliverTimestamp - now;\n                    if (countdown > 0) {\n                        this.scheduleNextTimerTask(nextOffset, DELAY_FOR_A_WHILE);\n                        return;\n                    }\n\n                    MessageExt msgExt = ScheduleMessageService.this.defaultMessageStore.lookMessageByOffset(offsetPy, sizePy);\n                    if (msgExt == null) {\n                        continue;\n                    }\n\n                    MessageExtBrokerInner msgInner = ScheduleMessageService.this.messageTimeup(msgExt);\n                    if (TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC.equals(msgInner.getTopic())) {\n                        log.error(\"[BUG] the real topic of schedule msg is {}, discard the msg. msg={}\",\n                            msgInner.getTopic(), msgInner);\n                        continue;\n                    }\n\n                    boolean deliverSuc;\n                    if (ScheduleMessageService.this.enableAsyncDeliver) {\n                        deliverSuc = this.asyncDeliver(msgInner, msgExt.getMsgId(), nextOffset, offsetPy, sizePy);\n                    } else {\n                        deliverSuc = this.syncDeliver(msgInner, msgExt.getMsgId(), nextOffset, offsetPy, sizePy);\n                    }\n\n                    if (!deliverSuc) {\n                        this.scheduleNextTimerTask(nextOffset, DELAY_FOR_A_WHILE);\n                        return;\n                    }\n                }\n\n                nextOffset = this.offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);\n            } catch (Exception e) {\n                log.error(\"ScheduleMessageService, messageTimeup execute error, offset = {}\", nextOffset, e);\n            } finally {\n                bufferCQ.release();\n            }\n\n            this.scheduleNextTimerTask(nextOffset, DELAY_FOR_A_WHILE);\n        }\n\n        public void scheduleNextTimerTask(long offset, long delay) {\n            ScheduleMessageService.this.deliverExecutorService.schedule(new DeliverDelayedMessageTimerTask(\n                this.delayLevel, offset), delay, TimeUnit.MILLISECONDS);\n        }\n\n        private boolean syncDeliver(MessageExtBrokerInner msgInner, String msgId, long offset, long offsetPy,\n            int sizePy) {\n            PutResultProcess resultProcess = deliverMessage(msgInner, msgId, offset, offsetPy, sizePy, false);\n            PutMessageResult result = resultProcess.get();\n            boolean sendStatus = result != null && result.getPutMessageStatus() == PutMessageStatus.PUT_OK;\n            if (sendStatus) {\n                ScheduleMessageService.this.updateOffset(this.delayLevel, resultProcess.getNextOffset());\n            }\n            return sendStatus;\n        }\n\n        private boolean asyncDeliver(MessageExtBrokerInner msgInner, String msgId, long offset, long offsetPy,\n            int sizePy) {\n            Queue<PutResultProcess> processesQueue = ScheduleMessageService.this.deliverPendingTable.get(this.delayLevel);\n\n            //Flow Control\n            int currentPendingNum = processesQueue.size();\n            int maxPendingLimit = ScheduleMessageService.this.defaultMessageStore.getMessageStoreConfig()\n                .getScheduleAsyncDeliverMaxPendingLimit();\n            if (currentPendingNum > maxPendingLimit) {\n                log.warn(\"Asynchronous deliver triggers flow control, \" +\n                    \"currentPendingNum={}, maxPendingLimit={}\", currentPendingNum, maxPendingLimit);\n                return false;\n            }\n\n            //Blocked\n            PutResultProcess firstProcess = processesQueue.peek();\n            if (firstProcess != null && firstProcess.need2Blocked()) {\n                log.warn(\"Asynchronous deliver block. info={}\", firstProcess.toString());\n                return false;\n            }\n\n            PutResultProcess resultProcess = deliverMessage(msgInner, msgId, offset, offsetPy, sizePy, true);\n            processesQueue.add(resultProcess);\n            return true;\n        }\n\n        private PutResultProcess deliverMessage(MessageExtBrokerInner msgInner, String msgId, long offset,\n            long offsetPy, int sizePy, boolean autoResend) {\n            CompletableFuture<PutMessageResult> future =\n                ScheduleMessageService.this.writeMessageStore.asyncPutMessage(msgInner);\n            return new PutResultProcess()\n                .setTopic(msgInner.getTopic())\n                .setDelayLevel(this.delayLevel)\n                .setOffset(offset)\n                .setPhysicOffset(offsetPy)\n                .setPhysicSize(sizePy)\n                .setMsgId(msgId)\n                .setAutoResend(autoResend)\n                .setFuture(future)\n                .thenProcess();\n        }\n    }\n```\n\n### <span id=\"rocketMQ5.x-now\"> RocketMQ 5.X的延时MQ现状 </span> [官方文档](https://rocketmq.apache.org/zh/docs/featureBehavior/02delaymessage)\n- 字段message.deliveryTimestamp\n- 可以预定触发的时间戳，而不是延时时长\n- 支持以格式为毫秒级unix时间戳（默认1000毫秒的精度也就是1秒）\n- 支持最长24小时，不支持自定义修改，超过24小时延时不生效，服务端会立即投递\n- 定时任务仅支持发送到MessageType为Delay的Topic中\n\n### <span id=\"rocketMQ5.x-principle\"> RocketMQ 5.X的延时MQ原理解析 </span>\n\n### <span id=\"rocketMQ5.x-code\"> RocketMQ 5.X的延时MQ源码解析 </span>\n\n#### <span id=\"write-end\"> 写在最后 </span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在2025年09月18日，心血来潮在github上搜索rocketMQ的延迟mq，发现了2018年的一些点点滴滴。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有自己为了学习ai并作为毕设的仓库，有同学带我玩的hexo + github实现的简单个人博客。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在看完文档和代码之后百感交集，终于打算重新开始写博客。不知道这次还能坚持多久，但是既然自己能一口气减肥掉了43斤（截至目前），那么还有什么不能的呢？\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加油吧自己，在没有目标的时候好好积累，厚积薄发。","source":"_posts/RocketMQ延时MQ的原理阅读.md","raw":"---\ntitle: RocketMQ延时MQ的原理阅读\ntags: [Java, RocketMQ, 分布式, 架构, 消息队列, 源码]\ncategories: [技术分享, 学习记录]\ndate: 2025-09-19 11:44:41\n---\nstatus: draft\ncreateDate: 2025-09-19 11:44:41\nendDate: \n\n## 目录\n- [RocketMQ 4.X的延时MQ现状](#rocketMQ4.x-now)☑️\n- [RocketMQ 4.X的延时MQ原理解析](#rocketMQ4.x-principle)☑️\n- [RocketMQ 4.X的延时MQ源码解析](#rocketMQ4.x-code)☑️\n- [RocketMQ 5.X的延时MQ现状](#rocketMQ5.x-now)☑️\n- [RocketMQ 5.X的延时MQ原理解析](#rocketMQ5.x-principle)⬜\n- [RocketMQ 5.X的延时MQ源码解析](#rocketMQ5.x-code)⬜\n- [写在最后](#write-end)\n\n\n\n### <span id=\"rocketMQ4.x-now\"> RocketMQ 4.X的延时MQ现状 </span> [官方文档](https://rocketmq.apache.org/zh/docs/4.x/producer/04message3/)\n- 字段message.delayTimeLevel\n- 枚举为数字1-18，只支持18个固定延时等级（1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h）\n\n### <span id=\"rocketMQ4.x-principle\"> RocketMQ 4.X的延时MQ原理解析 </span>\n底层实现主要是基于Broke端，主要涉及以下组件：\n1. **CommitLog 写入处**\n    当消息带有delayTimeLevel > 0时，在CommitLog#asyncPutMessage方法中会进行特殊处理(老版本是CommitLog#putMessage)\n    - 将原始的topic和queueId保存到消息属性中(REAL_TOPIC、REAL_QUEUE_ID)\n    - 修改消息的topic为系统预设的延迟topic(SCHEDULE_TOPIC_XXXX)\n    - 根据延迟级别计算出对应的queueId [ScheduleMessageService#delayLevel2QueueId](https://github.com/apache/rocketmq/blob/4.9.x/store/src/main/java/org/apache/rocketmq/store/schedule/ScheduleMessageService.java#L91)并投放到对应的queue中\n2. **定时调度服务ScheduleMessageService**\n    该服务负责扫描延迟队列中的消息，并在到期后将其重新投递到原始的topic\n    - 启动时为每一个延迟级别的queue创建一个定时任务\n    - 定期检查每个延迟队列的消息是否到期(上一步会计算当前时间，并根据延迟等级计算出到期时间，注意超出18会默认18)\n    - 到期后，恢复原始topic和queueId，重新构建消息并写入CommitLog，进入正常消费流程。\n3. **关键源码**\n    - <span id=\"SendMessageProcessor#asyncProcessRequest.back\">[org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncProcessRequest](#SendMessageProcessor#asyncProcessRequest)</span>\n    - <span id=\"SendMessageProcessor#asyncSendMessage.back\">[org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncSendMessage](#SendMessageProcessor#asyncSendMessage)</span>\n    - <span id=\"CommitLog#asyncPutMessage.back\">[org.apache.rocketmq.store.CommitLog#asyncPutMessage](#CommitLog#asyncPutMessage)</span>\n    - <span id=\"ScheduleMessageService#start.back\">[org.apache.rocketmq.store.schedule.ScheduleMessageService#start](#ScheduleMessageService#start)</span>\n    - <span id=\"DeliverDelayedMessageTimerTask.back\">[org.apache.rocketmq.store.schedule.ScheduleMessageService.DeliverDelayedMessageTimerTask](#DeliverDelayedMessageTimerTask)</span>\n\n### <span id=\"rocketMQ4.x-code\"> RocketMQ 4.X的延时MQ源码解析 </span>\n#### <span id=\"SendMessageProcessor#asyncProcessRequest\">[org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncProcessRequest](#SendMessageProcessor#asyncProcessRequest.back)</span>\n首先是收到的消息先通过这个方法进行转发处理，主要是第17行代码提供入口。\n```java\npublic CompletableFuture<RemotingCommand> asyncProcessRequest(ChannelHandlerContext ctx,\n                                                                  RemotingCommand request) throws RemotingCommandException {\n        final SendMessageContext mqtraceContext;\n        switch (request.getCode()) {\n            case RequestCode.CONSUMER_SEND_MSG_BACK:\n                return this.asyncConsumerSendMsgBack(ctx, request);\n            default:\n                SendMessageRequestHeader requestHeader = parseRequestHeader(request);\n                if (requestHeader == null) {\n                    return CompletableFuture.completedFuture(null);\n                }\n                mqtraceContext = buildMsgContext(ctx, requestHeader);\n                this.executeSendMessageHookBefore(ctx, request, mqtraceContext);\n                if (requestHeader.isBatch()) {\n                    return this.asyncSendBatchMessage(ctx, request, mqtraceContext, requestHeader);\n                } else {\n                    return this.asyncSendMessage(ctx, request, mqtraceContext, requestHeader);\n                }\n        }\n    }\n```\n#### <span id=\"SendMessageProcessor#asyncSendMessage\">[org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncSendMessage](#SendMessageProcessor#asyncSendMessage.back)</span>\n这里主要的是关注第61行代码，进入到Strore，运行asyncPutMessage。\n```java\nprivate CompletableFuture<RemotingCommand> asyncSendMessage(ChannelHandlerContext ctx, RemotingCommand request,\n                                                                SendMessageContext mqtraceContext,\n                                                                SendMessageRequestHeader requestHeader) {\n        final RemotingCommand response = preSend(ctx, request, requestHeader);\n        final SendMessageResponseHeader responseHeader = (SendMessageResponseHeader)response.readCustomHeader();\n\n        if (response.getCode() != -1) {\n            return CompletableFuture.completedFuture(response);\n        }\n\n        final byte[] body = request.getBody();\n\n        int queueIdInt = requestHeader.getQueueId();\n        TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());\n\n        if (queueIdInt < 0) {\n            queueIdInt = randomQueueId(topicConfig.getWriteQueueNums());\n        }\n\n        MessageExtBrokerInner msgInner = new MessageExtBrokerInner();\n        msgInner.setTopic(requestHeader.getTopic());\n        msgInner.setQueueId(queueIdInt);\n\n        if (!handleRetryAndDLQ(requestHeader, response, request, msgInner, topicConfig)) {\n            return CompletableFuture.completedFuture(response);\n        }\n\n        msgInner.setBody(body);\n        msgInner.setFlag(requestHeader.getFlag());\n        Map<String, String> origProps = MessageDecoder.string2messageProperties(requestHeader.getProperties());\n        MessageAccessor.setProperties(msgInner, origProps);\n        msgInner.setBornTimestamp(requestHeader.getBornTimestamp());\n        msgInner.setBornHost(ctx.channel().remoteAddress());\n        msgInner.setStoreHost(this.getStoreHost());\n        msgInner.setReconsumeTimes(requestHeader.getReconsumeTimes() == null ? 0 : requestHeader.getReconsumeTimes());\n        String clusterName = this.brokerController.getBrokerConfig().getBrokerClusterName();\n        MessageAccessor.putProperty(msgInner, MessageConst.PROPERTY_CLUSTER, clusterName);\n        if (origProps.containsKey(MessageConst.PROPERTY_WAIT_STORE_MSG_OK)) {\n            // There is no need to store \"WAIT=true\", remove it from propertiesString to save 9 bytes for each message.\n            // It works for most case. In some cases msgInner.setPropertiesString invoked later and replace it.\n            String waitStoreMsgOKValue = origProps.remove(MessageConst.PROPERTY_WAIT_STORE_MSG_OK);\n            msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));\n            // Reput to properties, since msgInner.isWaitStoreMsgOK() will be invoked later\n            origProps.put(MessageConst.PROPERTY_WAIT_STORE_MSG_OK, waitStoreMsgOKValue);\n        } else {\n            msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));\n        }\n\n        CompletableFuture<PutMessageResult> putMessageResult = null;\n        String transFlag = origProps.get(MessageConst.PROPERTY_TRANSACTION_PREPARED);\n        if (Boolean.parseBoolean(transFlag)) {\n            if (this.brokerController.getBrokerConfig().isRejectTransactionMessage()) {\n                response.setCode(ResponseCode.NO_PERMISSION);\n                response.setRemark(\n                        \"the broker[\" + this.brokerController.getBrokerConfig().getBrokerIP1()\n                                + \"] sending transaction message is forbidden\");\n                return CompletableFuture.completedFuture(response);\n            }\n            putMessageResult = this.brokerController.getTransactionalMessageService().asyncPrepareMessage(msgInner);\n        } else {\n            putMessageResult = this.brokerController.getMessageStore().asyncPutMessage(msgInner);\n        }\n        return handlePutMessageResultFuture(putMessageResult, response, request, msgInner, responseHeader, mqtraceContext, ctx, queueIdInt);\n    }\n```\n\n#### <span id=\"CommitLog#asyncPutMessage\">[org.apache.rocketmq.store.CommitLog#asyncPutMessage](#CommitLog#asyncPutMessage.back)</span>\nputMessage的过程中会进行判断，主要看第十八行开始，如果是延迟mq，则会将消息放入到topic=SCHEDULE_TOPIC_XXXX,queueId=delayLevel-1中\n```java\npublic CompletableFuture<PutMessageResult> asyncPutMessage(final MessageExtBrokerInner msg) {\n        // Set the storage time\n        msg.setStoreTimestamp(System.currentTimeMillis());\n        // Set the message body BODY CRC (consider the most appropriate setting\n        // on the client)\n        msg.setBodyCRC(UtilAll.crc32(msg.getBody()));\n        // Back to Results\n        AppendMessageResult result = null;\n\n        StoreStatsService storeStatsService = this.defaultMessageStore.getStoreStatsService();\n\n        String topic = msg.getTopic();\n//        int queueId msg.getQueueId();\n        final int tranType = MessageSysFlag.getTransactionValue(msg.getSysFlag());\n        if (tranType == MessageSysFlag.TRANSACTION_NOT_TYPE\n                || tranType == MessageSysFlag.TRANSACTION_COMMIT_TYPE) {\n            // Delay Delivery\n            if (msg.getDelayTimeLevel() > 0) {\n                if (msg.getDelayTimeLevel() > this.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel()) {\n                    msg.setDelayTimeLevel(this.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel());\n                }\n\n                topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;\n                int queueId = ScheduleMessageService.delayLevel2QueueId(msg.getDelayTimeLevel());\n\n                // Backup real topic, queueId\n                MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_TOPIC, msg.getTopic());\n                MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_QUEUE_ID, String.valueOf(msg.getQueueId()));\n                msg.setPropertiesString(MessageDecoder.messageProperties2String(msg.getProperties()));\n\n                msg.setTopic(topic);\n                msg.setQueueId(queueId);\n            }\n        }\n\n        InetSocketAddress bornSocketAddress = (InetSocketAddress) msg.getBornHost();\n        if (bornSocketAddress.getAddress() instanceof Inet6Address) {\n            msg.setBornHostV6Flag();\n        }\n\n        InetSocketAddress storeSocketAddress = (InetSocketAddress) msg.getStoreHost();\n        if (storeSocketAddress.getAddress() instanceof Inet6Address) {\n            msg.setStoreHostAddressV6Flag();\n        }\n\n        PutMessageThreadLocal putMessageThreadLocal = this.putMessageThreadLocal.get();\n        updateMaxMessageSize(putMessageThreadLocal);\n        if (!multiDispatch.isMultiDispatchMsg(msg)) {\n            PutMessageResult encodeResult = putMessageThreadLocal.getEncoder().encode(msg);\n            if (encodeResult != null) {\n                return CompletableFuture.completedFuture(encodeResult);\n            }\n            msg.setEncodedBuff(putMessageThreadLocal.getEncoder().getEncoderBuffer());\n        }\n        PutMessageContext putMessageContext = new PutMessageContext(generateKey(putMessageThreadLocal.getKeyBuilder(), msg));\n\n        long elapsedTimeInLock = 0;\n        MappedFile unlockMappedFile = null;\n\n        putMessageLock.lock(); //spin or ReentrantLock ,depending on store config\n        try {\n            MappedFile mappedFile = this.mappedFileQueue.getLastMappedFile();\n            long beginLockTimestamp = this.defaultMessageStore.getSystemClock().now();\n            this.beginTimeInLock = beginLockTimestamp;\n\n            // Here settings are stored timestamp, in order to ensure an orderly\n            // global\n            msg.setStoreTimestamp(beginLockTimestamp);\n\n            if (null == mappedFile || mappedFile.isFull()) {\n                mappedFile = this.mappedFileQueue.getLastMappedFile(0); // Mark: NewFile may be cause noise\n            }\n            if (null == mappedFile) {\n                log.error(\"create mapped file1 error, topic: \" + msg.getTopic() + \" clientAddr: \" + msg.getBornHostString());\n                return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.CREATE_MAPEDFILE_FAILED, null));\n            }\n\n            result = mappedFile.appendMessage(msg, this.appendMessageCallback, putMessageContext);\n            switch (result.getStatus()) {\n                case PUT_OK:\n                    break;\n                case END_OF_FILE:\n                    unlockMappedFile = mappedFile;\n                    // Create a new file, re-write the message\n                    mappedFile = this.mappedFileQueue.getLastMappedFile(0);\n                    if (null == mappedFile) {\n                        // XXX: warn and notify me\n                        log.error(\"create mapped file2 error, topic: \" + msg.getTopic() + \" clientAddr: \" + msg.getBornHostString());\n                        return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.CREATE_MAPEDFILE_FAILED, result));\n                    }\n                    result = mappedFile.appendMessage(msg, this.appendMessageCallback, putMessageContext);\n                    break;\n                case MESSAGE_SIZE_EXCEEDED:\n                case PROPERTIES_SIZE_EXCEEDED:\n                    return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.MESSAGE_ILLEGAL, result));\n                case UNKNOWN_ERROR:\n                    return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, result));\n                default:\n                    return CompletableFuture.completedFuture(new PutMessageResult(PutMessageStatus.UNKNOWN_ERROR, result));\n            }\n\n            elapsedTimeInLock = this.defaultMessageStore.getSystemClock().now() - beginLockTimestamp;\n        } finally {\n            beginTimeInLock = 0;\n            putMessageLock.unlock();\n        }\n\n        if (elapsedTimeInLock > 500) {\n            log.warn(\"[NOTIFYME]putMessage in lock cost time(ms)={}, bodyLength={} AppendMessageResult={}\", elapsedTimeInLock, msg.getBody().length, result);\n        }\n\n        if (null != unlockMappedFile && this.defaultMessageStore.getMessageStoreConfig().isWarmMapedFileEnable()) {\n            this.defaultMessageStore.unlockMappedFile(unlockMappedFile);\n        }\n\n        PutMessageResult putMessageResult = new PutMessageResult(PutMessageStatus.PUT_OK, result);\n\n        // Statistics\n        storeStatsService.getSinglePutMessageTopicTimesTotal(msg.getTopic()).add(1);\n        storeStatsService.getSinglePutMessageTopicSizeTotal(topic).add(result.getWroteBytes());\n\n        CompletableFuture<PutMessageStatus> flushResultFuture = submitFlushRequest(result, msg);\n        CompletableFuture<PutMessageStatus> replicaResultFuture = submitReplicaRequest(result, msg);\n        return flushResultFuture.thenCombine(replicaResultFuture, (flushStatus, replicaStatus) -> {\n            if (flushStatus != PutMessageStatus.PUT_OK) {\n                putMessageResult.setPutMessageStatus(flushStatus);\n            }\n            if (replicaStatus != PutMessageStatus.PUT_OK) {\n                putMessageResult.setPutMessageStatus(replicaStatus);\n            }\n            return putMessageResult;\n        });\n    }\n```\n#### <span id=\"ScheduleMessageService#start\">[org.apache.rocketmq.store.schedule.ScheduleMessageService#start](#ScheduleMessageService#start.back)</span>\n这里主要是解释schedule对每一个delayLevel都启动了一个定时任务线程，执行频率根据不同delayLevel对应的deladeliveryTime决定。\n```java\npublic void start() {\n        if (started.compareAndSet(false, true)) {\n            this.load();\n            this.deliverExecutorService = new ScheduledThreadPoolExecutor(this.maxDelayLevel, new ThreadFactoryImpl(\"ScheduleMessageTimerThread_\"));\n            if (this.enableAsyncDeliver) {\n                this.handleExecutorService = new ScheduledThreadPoolExecutor(this.maxDelayLevel, new ThreadFactoryImpl(\"ScheduleMessageExecutorHandleThread_\"));\n            }\n            for (Map.Entry<Integer, Long> entry : this.delayLevelTable.entrySet()) {\n                Integer level = entry.getKey();\n                Long timeDelay = entry.getValue();\n                Long offset = this.offsetTable.get(level);\n                if (null == offset) {\n                    offset = 0L;\n                }\n\n                if (timeDelay != null) {\n                    if (this.enableAsyncDeliver) {\n                        this.handleExecutorService.schedule(new HandlePutResultTask(level), FIRST_DELAY_TIME, TimeUnit.MILLISECONDS);\n                    }\n                    this.deliverExecutorService.schedule(new DeliverDelayedMessageTimerTask(level, offset), FIRST_DELAY_TIME, TimeUnit.MILLISECONDS);\n                }\n            }\n\n            this.deliverExecutorService.scheduleAtFixedRate(new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        if (started.get()) {\n                            ScheduleMessageService.this.persist();\n                        }\n                    } catch (Throwable e) {\n                        log.error(\"scheduleAtFixedRate flush exception\", e);\n                    }\n                }\n            }, 10000, this.defaultMessageStore.getMessageStoreConfig().getFlushDelayOffsetInterval(), TimeUnit.MILLISECONDS);\n        }\n    }\n```\n#### <span id=\"DeliverDelayedMessageTimerTask\">[org.apache.rocketmq.store.schedule.ScheduleMessageService.DeliverDelayedMessageTimerTask](#DeliverDelayedMessageTimerTask.back)</span>\ntask主要的任务就是101行，调用org.apache.rocketmq.store.schedule.ScheduleMessageService#messageTimeup，将对象转换成MessageExtBrokerInner对象（并在此时将topic和queueId重置成原来的），然后调用org.apache.rocketmq.store.DefaultMessageStore#putMessage，将消息放入到commitLog中。\n```java\nclass DeliverDelayedMessageTimerTask implements Runnable {\n        private final int delayLevel;\n        private final long offset;\n\n        public DeliverDelayedMessageTimerTask(int delayLevel, long offset) {\n            this.delayLevel = delayLevel;\n            this.offset = offset;\n        }\n\n        @Override\n        public void run() {\n            try {\n                if (isStarted()) {\n                    this.executeOnTimeup();\n                }\n            } catch (Exception e) {\n                // XXX: warn and notify me\n                log.error(\"ScheduleMessageService, executeOnTimeup exception\", e);\n                this.scheduleNextTimerTask(this.offset, DELAY_FOR_A_PERIOD);\n            }\n        }\n\n        /**\n         * @return\n         */\n        private long correctDeliverTimestamp(final long now, final long deliverTimestamp) {\n\n            long result = deliverTimestamp;\n\n            long maxTimestamp = now + ScheduleMessageService.this.delayLevelTable.get(this.delayLevel);\n            if (deliverTimestamp > maxTimestamp) {\n                result = now;\n            }\n\n            return result;\n        }\n\n        public void executeOnTimeup() {\n            ConsumeQueue cq =\n                ScheduleMessageService.this.defaultMessageStore.findConsumeQueue(TopicValidator.RMQ_SYS_SCHEDULE_TOPIC,\n                    delayLevel2QueueId(delayLevel));\n\n            if (cq == null) {\n                this.scheduleNextTimerTask(this.offset, DELAY_FOR_A_WHILE);\n                return;\n            }\n\n            SelectMappedBufferResult bufferCQ = cq.getIndexBuffer(this.offset);\n            if (bufferCQ == null) {\n                long resetOffset;\n                if ((resetOffset = cq.getMinOffsetInQueue()) > this.offset) {\n                    log.error(\"schedule CQ offset invalid. offset={}, cqMinOffset={}, queueId={}\",\n                        this.offset, resetOffset, cq.getQueueId());\n                } else if ((resetOffset = cq.getMaxOffsetInQueue()) < this.offset) {\n                    log.error(\"schedule CQ offset invalid. offset={}, cqMaxOffset={}, queueId={}\",\n                        this.offset, resetOffset, cq.getQueueId());\n                } else {\n                    resetOffset = this.offset;\n                }\n\n                this.scheduleNextTimerTask(resetOffset, DELAY_FOR_A_WHILE);\n                return;\n            }\n\n            long nextOffset = this.offset;\n            try {\n                int i = 0;\n                ConsumeQueueExt.CqExtUnit cqExtUnit = new ConsumeQueueExt.CqExtUnit();\n                for (; i < bufferCQ.getSize() && isStarted(); i += ConsumeQueue.CQ_STORE_UNIT_SIZE) {\n                    long offsetPy = bufferCQ.getByteBuffer().getLong();\n                    int sizePy = bufferCQ.getByteBuffer().getInt();\n                    long tagsCode = bufferCQ.getByteBuffer().getLong();\n\n                    if (cq.isExtAddr(tagsCode)) {\n                        if (cq.getExt(tagsCode, cqExtUnit)) {\n                            tagsCode = cqExtUnit.getTagsCode();\n                        } else {\n                            //can't find ext content.So re compute tags code.\n                            log.error(\"[BUG] can't find consume queue extend file content!addr={}, offsetPy={}, sizePy={}\",\n                                tagsCode, offsetPy, sizePy);\n                            long msgStoreTime = defaultMessageStore.getCommitLog().pickupStoreTimestamp(offsetPy, sizePy);\n                            tagsCode = computeDeliverTimestamp(delayLevel, msgStoreTime);\n                        }\n                    }\n\n                    long now = System.currentTimeMillis();\n                    long deliverTimestamp = this.correctDeliverTimestamp(now, tagsCode);\n                    nextOffset = offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);\n\n                    long countdown = deliverTimestamp - now;\n                    if (countdown > 0) {\n                        this.scheduleNextTimerTask(nextOffset, DELAY_FOR_A_WHILE);\n                        return;\n                    }\n\n                    MessageExt msgExt = ScheduleMessageService.this.defaultMessageStore.lookMessageByOffset(offsetPy, sizePy);\n                    if (msgExt == null) {\n                        continue;\n                    }\n\n                    MessageExtBrokerInner msgInner = ScheduleMessageService.this.messageTimeup(msgExt);\n                    if (TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC.equals(msgInner.getTopic())) {\n                        log.error(\"[BUG] the real topic of schedule msg is {}, discard the msg. msg={}\",\n                            msgInner.getTopic(), msgInner);\n                        continue;\n                    }\n\n                    boolean deliverSuc;\n                    if (ScheduleMessageService.this.enableAsyncDeliver) {\n                        deliverSuc = this.asyncDeliver(msgInner, msgExt.getMsgId(), nextOffset, offsetPy, sizePy);\n                    } else {\n                        deliverSuc = this.syncDeliver(msgInner, msgExt.getMsgId(), nextOffset, offsetPy, sizePy);\n                    }\n\n                    if (!deliverSuc) {\n                        this.scheduleNextTimerTask(nextOffset, DELAY_FOR_A_WHILE);\n                        return;\n                    }\n                }\n\n                nextOffset = this.offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);\n            } catch (Exception e) {\n                log.error(\"ScheduleMessageService, messageTimeup execute error, offset = {}\", nextOffset, e);\n            } finally {\n                bufferCQ.release();\n            }\n\n            this.scheduleNextTimerTask(nextOffset, DELAY_FOR_A_WHILE);\n        }\n\n        public void scheduleNextTimerTask(long offset, long delay) {\n            ScheduleMessageService.this.deliverExecutorService.schedule(new DeliverDelayedMessageTimerTask(\n                this.delayLevel, offset), delay, TimeUnit.MILLISECONDS);\n        }\n\n        private boolean syncDeliver(MessageExtBrokerInner msgInner, String msgId, long offset, long offsetPy,\n            int sizePy) {\n            PutResultProcess resultProcess = deliverMessage(msgInner, msgId, offset, offsetPy, sizePy, false);\n            PutMessageResult result = resultProcess.get();\n            boolean sendStatus = result != null && result.getPutMessageStatus() == PutMessageStatus.PUT_OK;\n            if (sendStatus) {\n                ScheduleMessageService.this.updateOffset(this.delayLevel, resultProcess.getNextOffset());\n            }\n            return sendStatus;\n        }\n\n        private boolean asyncDeliver(MessageExtBrokerInner msgInner, String msgId, long offset, long offsetPy,\n            int sizePy) {\n            Queue<PutResultProcess> processesQueue = ScheduleMessageService.this.deliverPendingTable.get(this.delayLevel);\n\n            //Flow Control\n            int currentPendingNum = processesQueue.size();\n            int maxPendingLimit = ScheduleMessageService.this.defaultMessageStore.getMessageStoreConfig()\n                .getScheduleAsyncDeliverMaxPendingLimit();\n            if (currentPendingNum > maxPendingLimit) {\n                log.warn(\"Asynchronous deliver triggers flow control, \" +\n                    \"currentPendingNum={}, maxPendingLimit={}\", currentPendingNum, maxPendingLimit);\n                return false;\n            }\n\n            //Blocked\n            PutResultProcess firstProcess = processesQueue.peek();\n            if (firstProcess != null && firstProcess.need2Blocked()) {\n                log.warn(\"Asynchronous deliver block. info={}\", firstProcess.toString());\n                return false;\n            }\n\n            PutResultProcess resultProcess = deliverMessage(msgInner, msgId, offset, offsetPy, sizePy, true);\n            processesQueue.add(resultProcess);\n            return true;\n        }\n\n        private PutResultProcess deliverMessage(MessageExtBrokerInner msgInner, String msgId, long offset,\n            long offsetPy, int sizePy, boolean autoResend) {\n            CompletableFuture<PutMessageResult> future =\n                ScheduleMessageService.this.writeMessageStore.asyncPutMessage(msgInner);\n            return new PutResultProcess()\n                .setTopic(msgInner.getTopic())\n                .setDelayLevel(this.delayLevel)\n                .setOffset(offset)\n                .setPhysicOffset(offsetPy)\n                .setPhysicSize(sizePy)\n                .setMsgId(msgId)\n                .setAutoResend(autoResend)\n                .setFuture(future)\n                .thenProcess();\n        }\n    }\n```\n\n### <span id=\"rocketMQ5.x-now\"> RocketMQ 5.X的延时MQ现状 </span> [官方文档](https://rocketmq.apache.org/zh/docs/featureBehavior/02delaymessage)\n- 字段message.deliveryTimestamp\n- 可以预定触发的时间戳，而不是延时时长\n- 支持以格式为毫秒级unix时间戳（默认1000毫秒的精度也就是1秒）\n- 支持最长24小时，不支持自定义修改，超过24小时延时不生效，服务端会立即投递\n- 定时任务仅支持发送到MessageType为Delay的Topic中\n\n### <span id=\"rocketMQ5.x-principle\"> RocketMQ 5.X的延时MQ原理解析 </span>\n\n### <span id=\"rocketMQ5.x-code\"> RocketMQ 5.X的延时MQ源码解析 </span>\n\n#### <span id=\"write-end\"> 写在最后 </span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在2025年09月18日，心血来潮在github上搜索rocketMQ的延迟mq，发现了2018年的一些点点滴滴。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有自己为了学习ai并作为毕设的仓库，有同学带我玩的hexo + github实现的简单个人博客。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在看完文档和代码之后百感交集，终于打算重新开始写博客。不知道这次还能坚持多久，但是既然自己能一口气减肥掉了43斤（截至目前），那么还有什么不能的呢？\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加油吧自己，在没有目标的时候好好积累，厚积薄发。","slug":"RocketMQ延时MQ的原理阅读","published":1,"updated":"2025-09-19T13:43:26.691Z","_id":"cmfqf6qtj0000kgu7a8n8a6iz","comments":1,"layout":"post","photos":[],"content":"<p>status: draft<br>createDate: 2025-09-19 11:44:41<br>endDate: </p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#rocketMQ4.x-now\">RocketMQ 4.X的延时MQ现状</a>☑️</li>\n<li><a href=\"#rocketMQ4.x-principle\">RocketMQ 4.X的延时MQ原理解析</a>☑️</li>\n<li><a href=\"#rocketMQ4.x-code\">RocketMQ 4.X的延时MQ源码解析</a>☑️</li>\n<li><a href=\"#rocketMQ5.x-now\">RocketMQ 5.X的延时MQ现状</a>☑️</li>\n<li><a href=\"#rocketMQ5.x-principle\">RocketMQ 5.X的延时MQ原理解析</a>⬜</li>\n<li><a href=\"#rocketMQ5.x-code\">RocketMQ 5.X的延时MQ源码解析</a>⬜</li>\n<li><a href=\"#write-end\">写在最后</a></li>\n</ul>\n<h3 id=\"RocketMQ-4-X的延时MQ现状-官方文档\"><a href=\"#RocketMQ-4-X的延时MQ现状-官方文档\" class=\"headerlink\" title=\" RocketMQ 4.X的延时MQ现状  官方文档\"></a><span id=\"rocketMQ4.x-now\"> RocketMQ 4.X的延时MQ现状 </span> <a href=\"https://rocketmq.apache.org/zh/docs/4.x/producer/04message3/\">官方文档</a></h3><ul>\n<li>字段message.delayTimeLevel</li>\n<li>枚举为数字1-18，只支持18个固定延时等级（1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h）</li>\n</ul>\n<h3 id=\"RocketMQ-4-X的延时MQ原理解析\"><a href=\"#RocketMQ-4-X的延时MQ原理解析\" class=\"headerlink\" title=\" RocketMQ 4.X的延时MQ原理解析 \"></a><span id=\"rocketMQ4.x-principle\"> RocketMQ 4.X的延时MQ原理解析 </span></h3><p>底层实现主要是基于Broke端，主要涉及以下组件：</p>\n<ol>\n<li><strong>CommitLog 写入处</strong><br> 当消息带有delayTimeLevel &gt; 0时，在CommitLog#asyncPutMessage方法中会进行特殊处理(老版本是CommitLog#putMessage)<ul>\n<li>将原始的topic和queueId保存到消息属性中(REAL_TOPIC、REAL_QUEUE_ID)</li>\n<li>修改消息的topic为系统预设的延迟topic(SCHEDULE_TOPIC_XXXX)</li>\n<li>根据延迟级别计算出对应的queueId <a href=\"https://github.com/apache/rocketmq/blob/4.9.x/store/src/main/java/org/apache/rocketmq/store/schedule/ScheduleMessageService.java#L91\">ScheduleMessageService#delayLevel2QueueId</a>并投放到对应的queue中</li>\n</ul>\n</li>\n<li><strong>定时调度服务ScheduleMessageService</strong><br> 该服务负责扫描延迟队列中的消息，并在到期后将其重新投递到原始的topic<ul>\n<li>启动时为每一个延迟级别的queue创建一个定时任务</li>\n<li>定期检查每个延迟队列的消息是否到期(上一步会计算当前时间，并根据延迟等级计算出到期时间，注意超出18会默认18)</li>\n<li>到期后，恢复原始topic和queueId，重新构建消息并写入CommitLog，进入正常消费流程。</li>\n</ul>\n</li>\n<li><strong>关键源码</strong><ul>\n<li><span id=\"SendMessageProcessor#asyncProcessRequest.back\"><a href=\"#SendMessageProcessor#asyncProcessRequest\">org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncProcessRequest</a></span></li>\n<li><span id=\"SendMessageProcessor#asyncSendMessage.back\"><a href=\"#SendMessageProcessor#asyncSendMessage\">org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncSendMessage</a></span></li>\n<li><span id=\"CommitLog#asyncPutMessage.back\"><a href=\"#CommitLog#asyncPutMessage\">org.apache.rocketmq.store.CommitLog#asyncPutMessage</a></span></li>\n<li><span id=\"ScheduleMessageService#start.back\"><a href=\"#ScheduleMessageService#start\">org.apache.rocketmq.store.schedule.ScheduleMessageService#start</a></span></li>\n<li><span id=\"DeliverDelayedMessageTimerTask.back\"><a href=\"#DeliverDelayedMessageTimerTask\">org.apache.rocketmq.store.schedule.ScheduleMessageService.DeliverDelayedMessageTimerTask</a></span></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"RocketMQ-4-X的延时MQ源码解析\"><a href=\"#RocketMQ-4-X的延时MQ源码解析\" class=\"headerlink\" title=\" RocketMQ 4.X的延时MQ源码解析 \"></a><span id=\"rocketMQ4.x-code\"> RocketMQ 4.X的延时MQ源码解析 </span></h3><h4 id=\"org-apache-rocketmq-broker-processor-SendMessageProcessor-asyncProcessRequest\"><a href=\"#org-apache-rocketmq-broker-processor-SendMessageProcessor-asyncProcessRequest\" class=\"headerlink\" title=\"org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncProcessRequest\"></a><span id=\"SendMessageProcessor#asyncProcessRequest\"><a href=\"#SendMessageProcessor#asyncProcessRequest.back\">org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncProcessRequest</a></span></h4><p>首先是收到的消息先通过这个方法进行转发处理，主要是第17行代码提供入口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;RemotingCommand&gt; <span class=\"title function_\">asyncProcessRequest</span><span class=\"params\">(ChannelHandlerContext ctx,</span></span><br><span class=\"line\"><span class=\"params\">                                                                  RemotingCommand request)</span> <span class=\"keyword\">throws</span> RemotingCommandException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> SendMessageContext mqtraceContext;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (request.getCode()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> RequestCode.CONSUMER_SEND_MSG_BACK:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.asyncConsumerSendMsgBack(ctx, request);</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"type\">SendMessageRequestHeader</span> <span class=\"variable\">requestHeader</span> <span class=\"operator\">=</span> parseRequestHeader(request);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (requestHeader == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> CompletableFuture.completedFuture(<span class=\"literal\">null</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                mqtraceContext = buildMsgContext(ctx, requestHeader);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.executeSendMessageHookBefore(ctx, request, mqtraceContext);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (requestHeader.isBatch()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.asyncSendBatchMessage(ctx, request, mqtraceContext, requestHeader);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.asyncSendMessage(ctx, request, mqtraceContext, requestHeader);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"org-apache-rocketmq-broker-processor-SendMessageProcessor-asyncSendMessage\"><a href=\"#org-apache-rocketmq-broker-processor-SendMessageProcessor-asyncSendMessage\" class=\"headerlink\" title=\"org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncSendMessage\"></a><span id=\"SendMessageProcessor#asyncSendMessage\"><a href=\"#SendMessageProcessor#asyncSendMessage.back\">org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncSendMessage</a></span></h4><p>这里主要的是关注第61行代码，进入到Strore，运行asyncPutMessage。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> CompletableFuture&lt;RemotingCommand&gt; <span class=\"title function_\">asyncSendMessage</span><span class=\"params\">(ChannelHandlerContext ctx, RemotingCommand request,</span></span><br><span class=\"line\"><span class=\"params\">                                                                SendMessageContext mqtraceContext,</span></span><br><span class=\"line\"><span class=\"params\">                                                                SendMessageRequestHeader requestHeader)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">RemotingCommand</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> preSend(ctx, request, requestHeader);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">SendMessageResponseHeader</span> <span class=\"variable\">responseHeader</span> <span class=\"operator\">=</span> (SendMessageResponseHeader)response.readCustomHeader();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response.getCode() != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> CompletableFuture.completedFuture(response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">byte</span>[] body = request.getBody();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">queueIdInt</span> <span class=\"operator\">=</span> requestHeader.getQueueId();</span><br><span class=\"line\">        <span class=\"type\">TopicConfig</span> <span class=\"variable\">topicConfig</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (queueIdInt &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            queueIdInt = randomQueueId(topicConfig.getWriteQueueNums());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">MessageExtBrokerInner</span> <span class=\"variable\">msgInner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MessageExtBrokerInner</span>();</span><br><span class=\"line\">        msgInner.setTopic(requestHeader.getTopic());</span><br><span class=\"line\">        msgInner.setQueueId(queueIdInt);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!handleRetryAndDLQ(requestHeader, response, request, msgInner, topicConfig)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> CompletableFuture.completedFuture(response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        msgInner.setBody(body);</span><br><span class=\"line\">        msgInner.setFlag(requestHeader.getFlag());</span><br><span class=\"line\">        Map&lt;String, String&gt; origProps = MessageDecoder.string2messageProperties(requestHeader.getProperties());</span><br><span class=\"line\">        MessageAccessor.setProperties(msgInner, origProps);</span><br><span class=\"line\">        msgInner.setBornTimestamp(requestHeader.getBornTimestamp());</span><br><span class=\"line\">        msgInner.setBornHost(ctx.channel().remoteAddress());</span><br><span class=\"line\">        msgInner.setStoreHost(<span class=\"built_in\">this</span>.getStoreHost());</span><br><span class=\"line\">        msgInner.setReconsumeTimes(requestHeader.getReconsumeTimes() == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : requestHeader.getReconsumeTimes());</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">clusterName</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.brokerController.getBrokerConfig().getBrokerClusterName();</span><br><span class=\"line\">        MessageAccessor.putProperty(msgInner, MessageConst.PROPERTY_CLUSTER, clusterName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (origProps.containsKey(MessageConst.PROPERTY_WAIT_STORE_MSG_OK)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// There is no need to store &quot;WAIT=true&quot;, remove it from propertiesString to save 9 bytes for each message.</span></span><br><span class=\"line\">            <span class=\"comment\">// It works for most case. In some cases msgInner.setPropertiesString invoked later and replace it.</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">waitStoreMsgOKValue</span> <span class=\"operator\">=</span> origProps.remove(MessageConst.PROPERTY_WAIT_STORE_MSG_OK);</span><br><span class=\"line\">            msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));</span><br><span class=\"line\">            <span class=\"comment\">// Reput to properties, since msgInner.isWaitStoreMsgOK() will be invoked later</span></span><br><span class=\"line\">            origProps.put(MessageConst.PROPERTY_WAIT_STORE_MSG_OK, waitStoreMsgOKValue);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        CompletableFuture&lt;PutMessageResult&gt; putMessageResult = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">transFlag</span> <span class=\"operator\">=</span> origProps.get(MessageConst.PROPERTY_TRANSACTION_PREPARED);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Boolean.parseBoolean(transFlag)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.brokerController.getBrokerConfig().isRejectTransactionMessage()) &#123;</span><br><span class=\"line\">                response.setCode(ResponseCode.NO_PERMISSION);</span><br><span class=\"line\">                response.setRemark(</span><br><span class=\"line\">                        <span class=\"string\">&quot;the broker[&quot;</span> + <span class=\"built_in\">this</span>.brokerController.getBrokerConfig().getBrokerIP1()</span><br><span class=\"line\">                                + <span class=\"string\">&quot;] sending transaction message is forbidden&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> CompletableFuture.completedFuture(response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            putMessageResult = <span class=\"built_in\">this</span>.brokerController.getTransactionalMessageService().asyncPrepareMessage(msgInner);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            putMessageResult = <span class=\"built_in\">this</span>.brokerController.getMessageStore().asyncPutMessage(msgInner);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handlePutMessageResultFuture(putMessageResult, response, request, msgInner, responseHeader, mqtraceContext, ctx, queueIdInt);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"org-apache-rocketmq-store-CommitLog-asyncPutMessage\"><a href=\"#org-apache-rocketmq-store-CommitLog-asyncPutMessage\" class=\"headerlink\" title=\"org.apache.rocketmq.store.CommitLog#asyncPutMessage\"></a><span id=\"CommitLog#asyncPutMessage\"><a href=\"#CommitLog#asyncPutMessage.back\">org.apache.rocketmq.store.CommitLog#asyncPutMessage</a></span></h4><p>putMessage的过程中会进行判断，主要看第十八行开始，如果是延迟mq，则会将消息放入到topic&#x3D;SCHEDULE_TOPIC_XXXX,queueId&#x3D;delayLevel-1中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;PutMessageResult&gt; <span class=\"title function_\">asyncPutMessage</span><span class=\"params\">(<span class=\"keyword\">final</span> MessageExtBrokerInner msg)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Set the storage time</span></span><br><span class=\"line\">        msg.setStoreTimestamp(System.currentTimeMillis());</span><br><span class=\"line\">        <span class=\"comment\">// Set the message body BODY CRC (consider the most appropriate setting</span></span><br><span class=\"line\">        <span class=\"comment\">// on the client)</span></span><br><span class=\"line\">        msg.setBodyCRC(UtilAll.crc32(msg.getBody()));</span><br><span class=\"line\">        <span class=\"comment\">// Back to Results</span></span><br><span class=\"line\">        <span class=\"type\">AppendMessageResult</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">StoreStatsService</span> <span class=\"variable\">storeStatsService</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.defaultMessageStore.getStoreStatsService();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">topic</span> <span class=\"operator\">=</span> msg.getTopic();</span><br><span class=\"line\"><span class=\"comment\">//        int queueId msg.getQueueId();</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">tranType</span> <span class=\"operator\">=</span> MessageSysFlag.getTransactionValue(msg.getSysFlag());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tranType == MessageSysFlag.TRANSACTION_NOT_TYPE</span><br><span class=\"line\">                || tranType == MessageSysFlag.TRANSACTION_COMMIT_TYPE) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Delay Delivery</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (msg.getDelayTimeLevel() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (msg.getDelayTimeLevel() &gt; <span class=\"built_in\">this</span>.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel()) &#123;</span><br><span class=\"line\">                    msg.setDelayTimeLevel(<span class=\"built_in\">this</span>.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">queueId</span> <span class=\"operator\">=</span> ScheduleMessageService.delayLevel2QueueId(msg.getDelayTimeLevel());</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Backup real topic, queueId</span></span><br><span class=\"line\">                MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_TOPIC, msg.getTopic());</span><br><span class=\"line\">                MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_QUEUE_ID, String.valueOf(msg.getQueueId()));</span><br><span class=\"line\">                msg.setPropertiesString(MessageDecoder.messageProperties2String(msg.getProperties()));</span><br><span class=\"line\"></span><br><span class=\"line\">                msg.setTopic(topic);</span><br><span class=\"line\">                msg.setQueueId(queueId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">InetSocketAddress</span> <span class=\"variable\">bornSocketAddress</span> <span class=\"operator\">=</span> (InetSocketAddress) msg.getBornHost();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bornSocketAddress.getAddress() <span class=\"keyword\">instanceof</span> Inet6Address) &#123;</span><br><span class=\"line\">            msg.setBornHostV6Flag();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">InetSocketAddress</span> <span class=\"variable\">storeSocketAddress</span> <span class=\"operator\">=</span> (InetSocketAddress) msg.getStoreHost();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (storeSocketAddress.getAddress() <span class=\"keyword\">instanceof</span> Inet6Address) &#123;</span><br><span class=\"line\">            msg.setStoreHostAddressV6Flag();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">PutMessageThreadLocal</span> <span class=\"variable\">putMessageThreadLocal</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.putMessageThreadLocal.get();</span><br><span class=\"line\">        updateMaxMessageSize(putMessageThreadLocal);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!multiDispatch.isMultiDispatchMsg(msg)) &#123;</span><br><span class=\"line\">            <span class=\"type\">PutMessageResult</span> <span class=\"variable\">encodeResult</span> <span class=\"operator\">=</span> putMessageThreadLocal.getEncoder().encode(msg);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (encodeResult != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> CompletableFuture.completedFuture(encodeResult);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            msg.setEncodedBuff(putMessageThreadLocal.getEncoder().getEncoderBuffer());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">PutMessageContext</span> <span class=\"variable\">putMessageContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PutMessageContext</span>(generateKey(putMessageThreadLocal.getKeyBuilder(), msg));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">elapsedTimeInLock</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">MappedFile</span> <span class=\"variable\">unlockMappedFile</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        putMessageLock.lock(); <span class=\"comment\">//spin or ReentrantLock ,depending on store config</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">MappedFile</span> <span class=\"variable\">mappedFile</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mappedFileQueue.getLastMappedFile();</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">beginLockTimestamp</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.defaultMessageStore.getSystemClock().now();</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.beginTimeInLock = beginLockTimestamp;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Here settings are stored timestamp, in order to ensure an orderly</span></span><br><span class=\"line\">            <span class=\"comment\">// global</span></span><br><span class=\"line\">            msg.setStoreTimestamp(beginLockTimestamp);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == mappedFile || mappedFile.isFull()) &#123;</span><br><span class=\"line\">                mappedFile = <span class=\"built_in\">this</span>.mappedFileQueue.getLastMappedFile(<span class=\"number\">0</span>); <span class=\"comment\">// Mark: NewFile may be cause noise</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == mappedFile) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;create mapped file1 error, topic: &quot;</span> + msg.getTopic() + <span class=\"string\">&quot; clientAddr: &quot;</span> + msg.getBornHostString());</span><br><span class=\"line\">                <span class=\"keyword\">return</span> CompletableFuture.completedFuture(<span class=\"keyword\">new</span> <span class=\"title class_\">PutMessageResult</span>(PutMessageStatus.CREATE_MAPEDFILE_FAILED, <span class=\"literal\">null</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            result = mappedFile.appendMessage(msg, <span class=\"built_in\">this</span>.appendMessageCallback, putMessageContext);</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (result.getStatus()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> PUT_OK:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> END_OF_FILE:</span><br><span class=\"line\">                    unlockMappedFile = mappedFile;</span><br><span class=\"line\">                    <span class=\"comment\">// Create a new file, re-write the message</span></span><br><span class=\"line\">                    mappedFile = <span class=\"built_in\">this</span>.mappedFileQueue.getLastMappedFile(<span class=\"number\">0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == mappedFile) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// <span class=\"doctag\">XXX:</span> warn and notify me</span></span><br><span class=\"line\">                        log.error(<span class=\"string\">&quot;create mapped file2 error, topic: &quot;</span> + msg.getTopic() + <span class=\"string\">&quot; clientAddr: &quot;</span> + msg.getBornHostString());</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> CompletableFuture.completedFuture(<span class=\"keyword\">new</span> <span class=\"title class_\">PutMessageResult</span>(PutMessageStatus.CREATE_MAPEDFILE_FAILED, result));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    result = mappedFile.appendMessage(msg, <span class=\"built_in\">this</span>.appendMessageCallback, putMessageContext);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> MESSAGE_SIZE_EXCEEDED:</span><br><span class=\"line\">                <span class=\"keyword\">case</span> PROPERTIES_SIZE_EXCEEDED:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> CompletableFuture.completedFuture(<span class=\"keyword\">new</span> <span class=\"title class_\">PutMessageResult</span>(PutMessageStatus.MESSAGE_ILLEGAL, result));</span><br><span class=\"line\">                <span class=\"keyword\">case</span> UNKNOWN_ERROR:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> CompletableFuture.completedFuture(<span class=\"keyword\">new</span> <span class=\"title class_\">PutMessageResult</span>(PutMessageStatus.UNKNOWN_ERROR, result));</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> CompletableFuture.completedFuture(<span class=\"keyword\">new</span> <span class=\"title class_\">PutMessageResult</span>(PutMessageStatus.UNKNOWN_ERROR, result));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            elapsedTimeInLock = <span class=\"built_in\">this</span>.defaultMessageStore.getSystemClock().now() - beginLockTimestamp;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            beginTimeInLock = <span class=\"number\">0</span>;</span><br><span class=\"line\">            putMessageLock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elapsedTimeInLock &gt; <span class=\"number\">500</span>) &#123;</span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;[NOTIFYME]putMessage in lock cost time(ms)=&#123;&#125;, bodyLength=&#123;&#125; AppendMessageResult=&#123;&#125;&quot;</span>, elapsedTimeInLock, msg.getBody().length, result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != unlockMappedFile &amp;&amp; <span class=\"built_in\">this</span>.defaultMessageStore.getMessageStoreConfig().isWarmMapedFileEnable()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.defaultMessageStore.unlockMappedFile(unlockMappedFile);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">PutMessageResult</span> <span class=\"variable\">putMessageResult</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PutMessageResult</span>(PutMessageStatus.PUT_OK, result);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Statistics</span></span><br><span class=\"line\">        storeStatsService.getSinglePutMessageTopicTimesTotal(msg.getTopic()).add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        storeStatsService.getSinglePutMessageTopicSizeTotal(topic).add(result.getWroteBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">        CompletableFuture&lt;PutMessageStatus&gt; flushResultFuture = submitFlushRequest(result, msg);</span><br><span class=\"line\">        CompletableFuture&lt;PutMessageStatus&gt; replicaResultFuture = submitReplicaRequest(result, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flushResultFuture.thenCombine(replicaResultFuture, (flushStatus, replicaStatus) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flushStatus != PutMessageStatus.PUT_OK) &#123;</span><br><span class=\"line\">                putMessageResult.setPutMessageStatus(flushStatus);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (replicaStatus != PutMessageStatus.PUT_OK) &#123;</span><br><span class=\"line\">                putMessageResult.setPutMessageStatus(replicaStatus);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> putMessageResult;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"org-apache-rocketmq-store-schedule-ScheduleMessageService-start\"><a href=\"#org-apache-rocketmq-store-schedule-ScheduleMessageService-start\" class=\"headerlink\" title=\"org.apache.rocketmq.store.schedule.ScheduleMessageService#start\"></a><span id=\"ScheduleMessageService#start\"><a href=\"#ScheduleMessageService#start.back\">org.apache.rocketmq.store.schedule.ScheduleMessageService#start</a></span></h4><p>这里主要是解释schedule对每一个delayLevel都启动了一个定时任务线程，执行频率根据不同delayLevel对应的deladeliveryTime决定。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (started.compareAndSet(<span class=\"literal\">false</span>, <span class=\"literal\">true</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.load();</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.deliverExecutorService = <span class=\"keyword\">new</span> <span class=\"title class_\">ScheduledThreadPoolExecutor</span>(<span class=\"built_in\">this</span>.maxDelayLevel, <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadFactoryImpl</span>(<span class=\"string\">&quot;ScheduleMessageTimerThread_&quot;</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.enableAsyncDeliver) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.handleExecutorService = <span class=\"keyword\">new</span> <span class=\"title class_\">ScheduledThreadPoolExecutor</span>(<span class=\"built_in\">this</span>.maxDelayLevel, <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadFactoryImpl</span>(<span class=\"string\">&quot;ScheduleMessageExecutorHandleThread_&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Map.Entry&lt;Integer, Long&gt; entry : <span class=\"built_in\">this</span>.delayLevelTable.entrySet()) &#123;</span><br><span class=\"line\">                <span class=\"type\">Integer</span> <span class=\"variable\">level</span> <span class=\"operator\">=</span> entry.getKey();</span><br><span class=\"line\">                <span class=\"type\">Long</span> <span class=\"variable\">timeDelay</span> <span class=\"operator\">=</span> entry.getValue();</span><br><span class=\"line\">                <span class=\"type\">Long</span> <span class=\"variable\">offset</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.offsetTable.get(level);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == offset) &#123;</span><br><span class=\"line\">                    offset = <span class=\"number\">0L</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (timeDelay != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.enableAsyncDeliver) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.handleExecutorService.schedule(<span class=\"keyword\">new</span> <span class=\"title class_\">HandlePutResultTask</span>(level), FIRST_DELAY_TIME, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.deliverExecutorService.schedule(<span class=\"keyword\">new</span> <span class=\"title class_\">DeliverDelayedMessageTimerTask</span>(level, offset), FIRST_DELAY_TIME, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.deliverExecutorService.scheduleAtFixedRate(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (started.get()) &#123;</span><br><span class=\"line\">                            ScheduleMessageService.<span class=\"built_in\">this</span>.persist();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                        log.error(<span class=\"string\">&quot;scheduleAtFixedRate flush exception&quot;</span>, e);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"number\">10000</span>, <span class=\"built_in\">this</span>.defaultMessageStore.getMessageStoreConfig().getFlushDelayOffsetInterval(), TimeUnit.MILLISECONDS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"org-apache-rocketmq-store-schedule-ScheduleMessageService-DeliverDelayedMessageTimerTask\"><a href=\"#org-apache-rocketmq-store-schedule-ScheduleMessageService-DeliverDelayedMessageTimerTask\" class=\"headerlink\" title=\"org.apache.rocketmq.store.schedule.ScheduleMessageService.DeliverDelayedMessageTimerTask\"></a><span id=\"DeliverDelayedMessageTimerTask\"><a href=\"#DeliverDelayedMessageTimerTask.back\">org.apache.rocketmq.store.schedule.ScheduleMessageService.DeliverDelayedMessageTimerTask</a></span></h4><p>task主要的任务就是101行，调用org.apache.rocketmq.store.schedule.ScheduleMessageService#messageTimeup，将对象转换成MessageExtBrokerInner对象（并在此时将topic和queueId重置成原来的），然后调用org.apache.rocketmq.store.DefaultMessageStore#putMessage，将消息放入到commitLog中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DeliverDelayedMessageTimerTask</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> delayLevel;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> offset;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">DeliverDelayedMessageTimerTask</span><span class=\"params\">(<span class=\"type\">int</span> delayLevel, <span class=\"type\">long</span> offset)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.delayLevel = delayLevel;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.offset = offset;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isStarted()) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.executeOnTimeup();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">XXX:</span> warn and notify me</span></span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;ScheduleMessageService, executeOnTimeup exception&quot;</span>, e);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.scheduleNextTimerTask(<span class=\"built_in\">this</span>.offset, DELAY_FOR_A_PERIOD);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">long</span> <span class=\"title function_\">correctDeliverTimestamp</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">long</span> now, <span class=\"keyword\">final</span> <span class=\"type\">long</span> deliverTimestamp)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> deliverTimestamp;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">maxTimestamp</span> <span class=\"operator\">=</span> now + ScheduleMessageService.<span class=\"built_in\">this</span>.delayLevelTable.get(<span class=\"built_in\">this</span>.delayLevel);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (deliverTimestamp &gt; maxTimestamp) &#123;</span><br><span class=\"line\">                result = now;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">executeOnTimeup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">ConsumeQueue</span> <span class=\"variable\">cq</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                ScheduleMessageService.<span class=\"built_in\">this</span>.defaultMessageStore.findConsumeQueue(TopicValidator.RMQ_SYS_SCHEDULE_TOPIC,</span><br><span class=\"line\">                    delayLevel2QueueId(delayLevel));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cq == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.scheduleNextTimerTask(<span class=\"built_in\">this</span>.offset, DELAY_FOR_A_WHILE);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">SelectMappedBufferResult</span> <span class=\"variable\">bufferCQ</span> <span class=\"operator\">=</span> cq.getIndexBuffer(<span class=\"built_in\">this</span>.offset);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bufferCQ == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">long</span> resetOffset;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((resetOffset = cq.getMinOffsetInQueue()) &gt; <span class=\"built_in\">this</span>.offset) &#123;</span><br><span class=\"line\">                    log.error(<span class=\"string\">&quot;schedule CQ offset invalid. offset=&#123;&#125;, cqMinOffset=&#123;&#125;, queueId=&#123;&#125;&quot;</span>,</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.offset, resetOffset, cq.getQueueId());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((resetOffset = cq.getMaxOffsetInQueue()) &lt; <span class=\"built_in\">this</span>.offset) &#123;</span><br><span class=\"line\">                    log.error(<span class=\"string\">&quot;schedule CQ offset invalid. offset=&#123;&#125;, cqMaxOffset=&#123;&#125;, queueId=&#123;&#125;&quot;</span>,</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.offset, resetOffset, cq.getQueueId());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resetOffset = <span class=\"built_in\">this</span>.offset;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.scheduleNextTimerTask(resetOffset, DELAY_FOR_A_WHILE);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">nextOffset</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.offset;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                ConsumeQueueExt.<span class=\"type\">CqExtUnit</span> <span class=\"variable\">cqExtUnit</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConsumeQueueExt</span>.CqExtUnit();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (; i &lt; bufferCQ.getSize() &amp;&amp; isStarted(); i += ConsumeQueue.CQ_STORE_UNIT_SIZE) &#123;</span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"variable\">offsetPy</span> <span class=\"operator\">=</span> bufferCQ.getByteBuffer().getLong();</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">sizePy</span> <span class=\"operator\">=</span> bufferCQ.getByteBuffer().getInt();</span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"variable\">tagsCode</span> <span class=\"operator\">=</span> bufferCQ.getByteBuffer().getLong();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cq.isExtAddr(tagsCode)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (cq.getExt(tagsCode, cqExtUnit)) &#123;</span><br><span class=\"line\">                            tagsCode = cqExtUnit.getTagsCode();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//can&#x27;t find ext content.So re compute tags code.</span></span><br><span class=\"line\">                            log.error(<span class=\"string\">&quot;[BUG] can&#x27;t find consume queue extend file content!addr=&#123;&#125;, offsetPy=&#123;&#125;, sizePy=&#123;&#125;&quot;</span>,</span><br><span class=\"line\">                                tagsCode, offsetPy, sizePy);</span><br><span class=\"line\">                            <span class=\"type\">long</span> <span class=\"variable\">msgStoreTime</span> <span class=\"operator\">=</span> defaultMessageStore.getCommitLog().pickupStoreTimestamp(offsetPy, sizePy);</span><br><span class=\"line\">                            tagsCode = computeDeliverTimestamp(delayLevel, msgStoreTime);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"variable\">deliverTimestamp</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.correctDeliverTimestamp(now, tagsCode);</span><br><span class=\"line\">                    nextOffset = offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"variable\">countdown</span> <span class=\"operator\">=</span> deliverTimestamp - now;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (countdown &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.scheduleNextTimerTask(nextOffset, DELAY_FOR_A_WHILE);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">MessageExt</span> <span class=\"variable\">msgExt</span> <span class=\"operator\">=</span> ScheduleMessageService.<span class=\"built_in\">this</span>.defaultMessageStore.lookMessageByOffset(offsetPy, sizePy);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (msgExt == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">MessageExtBrokerInner</span> <span class=\"variable\">msgInner</span> <span class=\"operator\">=</span> ScheduleMessageService.<span class=\"built_in\">this</span>.messageTimeup(msgExt);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC.equals(msgInner.getTopic())) &#123;</span><br><span class=\"line\">                        log.error(<span class=\"string\">&quot;[BUG] the real topic of schedule msg is &#123;&#125;, discard the msg. msg=&#123;&#125;&quot;</span>,</span><br><span class=\"line\">                            msgInner.getTopic(), msgInner);</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">boolean</span> deliverSuc;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ScheduleMessageService.<span class=\"built_in\">this</span>.enableAsyncDeliver) &#123;</span><br><span class=\"line\">                        deliverSuc = <span class=\"built_in\">this</span>.asyncDeliver(msgInner, msgExt.getMsgId(), nextOffset, offsetPy, sizePy);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        deliverSuc = <span class=\"built_in\">this</span>.syncDeliver(msgInner, msgExt.getMsgId(), nextOffset, offsetPy, sizePy);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!deliverSuc) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.scheduleNextTimerTask(nextOffset, DELAY_FOR_A_WHILE);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                nextOffset = <span class=\"built_in\">this</span>.offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;ScheduleMessageService, messageTimeup execute error, offset = &#123;&#125;&quot;</span>, nextOffset, e);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                bufferCQ.release();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.scheduleNextTimerTask(nextOffset, DELAY_FOR_A_WHILE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">scheduleNextTimerTask</span><span class=\"params\">(<span class=\"type\">long</span> offset, <span class=\"type\">long</span> delay)</span> &#123;</span><br><span class=\"line\">            ScheduleMessageService.<span class=\"built_in\">this</span>.deliverExecutorService.schedule(<span class=\"keyword\">new</span> <span class=\"title class_\">DeliverDelayedMessageTimerTask</span>(</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.delayLevel, offset), delay, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">syncDeliver</span><span class=\"params\">(MessageExtBrokerInner msgInner, String msgId, <span class=\"type\">long</span> offset, <span class=\"type\">long</span> offsetPy,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"type\">int</span> sizePy)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">PutResultProcess</span> <span class=\"variable\">resultProcess</span> <span class=\"operator\">=</span> deliverMessage(msgInner, msgId, offset, offsetPy, sizePy, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"type\">PutMessageResult</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> resultProcess.get();</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">sendStatus</span> <span class=\"operator\">=</span> result != <span class=\"literal\">null</span> &amp;&amp; result.getPutMessageStatus() == PutMessageStatus.PUT_OK;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sendStatus) &#123;</span><br><span class=\"line\">                ScheduleMessageService.<span class=\"built_in\">this</span>.updateOffset(<span class=\"built_in\">this</span>.delayLevel, resultProcess.getNextOffset());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sendStatus;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">asyncDeliver</span><span class=\"params\">(MessageExtBrokerInner msgInner, String msgId, <span class=\"type\">long</span> offset, <span class=\"type\">long</span> offsetPy,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"type\">int</span> sizePy)</span> &#123;</span><br><span class=\"line\">            Queue&lt;PutResultProcess&gt; processesQueue = ScheduleMessageService.<span class=\"built_in\">this</span>.deliverPendingTable.get(<span class=\"built_in\">this</span>.delayLevel);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//Flow Control</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">currentPendingNum</span> <span class=\"operator\">=</span> processesQueue.size();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">maxPendingLimit</span> <span class=\"operator\">=</span> ScheduleMessageService.<span class=\"built_in\">this</span>.defaultMessageStore.getMessageStoreConfig()</span><br><span class=\"line\">                .getScheduleAsyncDeliverMaxPendingLimit();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (currentPendingNum &gt; maxPendingLimit) &#123;</span><br><span class=\"line\">                log.warn(<span class=\"string\">&quot;Asynchronous deliver triggers flow control, &quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;currentPendingNum=&#123;&#125;, maxPendingLimit=&#123;&#125;&quot;</span>, currentPendingNum, maxPendingLimit);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//Blocked</span></span><br><span class=\"line\">            <span class=\"type\">PutResultProcess</span> <span class=\"variable\">firstProcess</span> <span class=\"operator\">=</span> processesQueue.peek();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (firstProcess != <span class=\"literal\">null</span> &amp;&amp; firstProcess.need2Blocked()) &#123;</span><br><span class=\"line\">                log.warn(<span class=\"string\">&quot;Asynchronous deliver block. info=&#123;&#125;&quot;</span>, firstProcess.toString());</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">PutResultProcess</span> <span class=\"variable\">resultProcess</span> <span class=\"operator\">=</span> deliverMessage(msgInner, msgId, offset, offsetPy, sizePy, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            processesQueue.add(resultProcess);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> PutResultProcess <span class=\"title function_\">deliverMessage</span><span class=\"params\">(MessageExtBrokerInner msgInner, String msgId, <span class=\"type\">long</span> offset,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"type\">long</span> offsetPy, <span class=\"type\">int</span> sizePy, <span class=\"type\">boolean</span> autoResend)</span> &#123;</span><br><span class=\"line\">            CompletableFuture&lt;PutMessageResult&gt; future =</span><br><span class=\"line\">                ScheduleMessageService.<span class=\"built_in\">this</span>.writeMessageStore.asyncPutMessage(msgInner);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PutResultProcess</span>()</span><br><span class=\"line\">                .setTopic(msgInner.getTopic())</span><br><span class=\"line\">                .setDelayLevel(<span class=\"built_in\">this</span>.delayLevel)</span><br><span class=\"line\">                .setOffset(offset)</span><br><span class=\"line\">                .setPhysicOffset(offsetPy)</span><br><span class=\"line\">                .setPhysicSize(sizePy)</span><br><span class=\"line\">                .setMsgId(msgId)</span><br><span class=\"line\">                .setAutoResend(autoResend)</span><br><span class=\"line\">                .setFuture(future)</span><br><span class=\"line\">                .thenProcess();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RocketMQ-5-X的延时MQ现状-官方文档\"><a href=\"#RocketMQ-5-X的延时MQ现状-官方文档\" class=\"headerlink\" title=\" RocketMQ 5.X的延时MQ现状  官方文档\"></a><span id=\"rocketMQ5.x-now\"> RocketMQ 5.X的延时MQ现状 </span> <a href=\"https://rocketmq.apache.org/zh/docs/featureBehavior/02delaymessage\">官方文档</a></h3><ul>\n<li>字段message.deliveryTimestamp</li>\n<li>可以预定触发的时间戳，而不是延时时长</li>\n<li>支持以格式为毫秒级unix时间戳（默认1000毫秒的精度也就是1秒）</li>\n<li>支持最长24小时，不支持自定义修改，超过24小时延时不生效，服务端会立即投递</li>\n<li>定时任务仅支持发送到MessageType为Delay的Topic中</li>\n</ul>\n<h3 id=\"RocketMQ-5-X的延时MQ原理解析\"><a href=\"#RocketMQ-5-X的延时MQ原理解析\" class=\"headerlink\" title=\" RocketMQ 5.X的延时MQ原理解析 \"></a><span id=\"rocketMQ5.x-principle\"> RocketMQ 5.X的延时MQ原理解析 </span></h3><h3 id=\"RocketMQ-5-X的延时MQ源码解析\"><a href=\"#RocketMQ-5-X的延时MQ源码解析\" class=\"headerlink\" title=\" RocketMQ 5.X的延时MQ源码解析 \"></a><span id=\"rocketMQ5.x-code\"> RocketMQ 5.X的延时MQ源码解析 </span></h3><h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\" 写在最后 \"></a><span id=\"write-end\"> 写在最后 </span></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在2025年09月18日，心血来潮在github上搜索rocketMQ的延迟mq，发现了2018年的一些点点滴滴。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有自己为了学习ai并作为毕设的仓库，有同学带我玩的hexo + github实现的简单个人博客。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在看完文档和代码之后百感交集，终于打算重新开始写博客。不知道这次还能坚持多久，但是既然自己能一口气减肥掉了43斤（截至目前），那么还有什么不能的呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加油吧自己，在没有目标的时候好好积累，厚积薄发。</p>\n","excerpt":"","more":"<p>status: draft<br>createDate: 2025-09-19 11:44:41<br>endDate: </p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#rocketMQ4.x-now\">RocketMQ 4.X的延时MQ现状</a>☑️</li>\n<li><a href=\"#rocketMQ4.x-principle\">RocketMQ 4.X的延时MQ原理解析</a>☑️</li>\n<li><a href=\"#rocketMQ4.x-code\">RocketMQ 4.X的延时MQ源码解析</a>☑️</li>\n<li><a href=\"#rocketMQ5.x-now\">RocketMQ 5.X的延时MQ现状</a>☑️</li>\n<li><a href=\"#rocketMQ5.x-principle\">RocketMQ 5.X的延时MQ原理解析</a>⬜</li>\n<li><a href=\"#rocketMQ5.x-code\">RocketMQ 5.X的延时MQ源码解析</a>⬜</li>\n<li><a href=\"#write-end\">写在最后</a></li>\n</ul>\n<h3 id=\"RocketMQ-4-X的延时MQ现状-官方文档\"><a href=\"#RocketMQ-4-X的延时MQ现状-官方文档\" class=\"headerlink\" title=\" RocketMQ 4.X的延时MQ现状  官方文档\"></a><span id=\"rocketMQ4.x-now\"> RocketMQ 4.X的延时MQ现状 </span> <a href=\"https://rocketmq.apache.org/zh/docs/4.x/producer/04message3/\">官方文档</a></h3><ul>\n<li>字段message.delayTimeLevel</li>\n<li>枚举为数字1-18，只支持18个固定延时等级（1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h）</li>\n</ul>\n<h3 id=\"RocketMQ-4-X的延时MQ原理解析\"><a href=\"#RocketMQ-4-X的延时MQ原理解析\" class=\"headerlink\" title=\" RocketMQ 4.X的延时MQ原理解析 \"></a><span id=\"rocketMQ4.x-principle\"> RocketMQ 4.X的延时MQ原理解析 </span></h3><p>底层实现主要是基于Broke端，主要涉及以下组件：</p>\n<ol>\n<li><strong>CommitLog 写入处</strong><br> 当消息带有delayTimeLevel &gt; 0时，在CommitLog#asyncPutMessage方法中会进行特殊处理(老版本是CommitLog#putMessage)<ul>\n<li>将原始的topic和queueId保存到消息属性中(REAL_TOPIC、REAL_QUEUE_ID)</li>\n<li>修改消息的topic为系统预设的延迟topic(SCHEDULE_TOPIC_XXXX)</li>\n<li>根据延迟级别计算出对应的queueId <a href=\"https://github.com/apache/rocketmq/blob/4.9.x/store/src/main/java/org/apache/rocketmq/store/schedule/ScheduleMessageService.java#L91\">ScheduleMessageService#delayLevel2QueueId</a>并投放到对应的queue中</li>\n</ul>\n</li>\n<li><strong>定时调度服务ScheduleMessageService</strong><br> 该服务负责扫描延迟队列中的消息，并在到期后将其重新投递到原始的topic<ul>\n<li>启动时为每一个延迟级别的queue创建一个定时任务</li>\n<li>定期检查每个延迟队列的消息是否到期(上一步会计算当前时间，并根据延迟等级计算出到期时间，注意超出18会默认18)</li>\n<li>到期后，恢复原始topic和queueId，重新构建消息并写入CommitLog，进入正常消费流程。</li>\n</ul>\n</li>\n<li><strong>关键源码</strong><ul>\n<li><span id=\"SendMessageProcessor#asyncProcessRequest.back\"><a href=\"#SendMessageProcessor#asyncProcessRequest\">org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncProcessRequest</a></span></li>\n<li><span id=\"SendMessageProcessor#asyncSendMessage.back\"><a href=\"#SendMessageProcessor#asyncSendMessage\">org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncSendMessage</a></span></li>\n<li><span id=\"CommitLog#asyncPutMessage.back\"><a href=\"#CommitLog#asyncPutMessage\">org.apache.rocketmq.store.CommitLog#asyncPutMessage</a></span></li>\n<li><span id=\"ScheduleMessageService#start.back\"><a href=\"#ScheduleMessageService#start\">org.apache.rocketmq.store.schedule.ScheduleMessageService#start</a></span></li>\n<li><span id=\"DeliverDelayedMessageTimerTask.back\"><a href=\"#DeliverDelayedMessageTimerTask\">org.apache.rocketmq.store.schedule.ScheduleMessageService.DeliverDelayedMessageTimerTask</a></span></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"RocketMQ-4-X的延时MQ源码解析\"><a href=\"#RocketMQ-4-X的延时MQ源码解析\" class=\"headerlink\" title=\" RocketMQ 4.X的延时MQ源码解析 \"></a><span id=\"rocketMQ4.x-code\"> RocketMQ 4.X的延时MQ源码解析 </span></h3><h4 id=\"org-apache-rocketmq-broker-processor-SendMessageProcessor-asyncProcessRequest\"><a href=\"#org-apache-rocketmq-broker-processor-SendMessageProcessor-asyncProcessRequest\" class=\"headerlink\" title=\"org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncProcessRequest\"></a><span id=\"SendMessageProcessor#asyncProcessRequest\"><a href=\"#SendMessageProcessor#asyncProcessRequest.back\">org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncProcessRequest</a></span></h4><p>首先是收到的消息先通过这个方法进行转发处理，主要是第17行代码提供入口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;RemotingCommand&gt; <span class=\"title function_\">asyncProcessRequest</span><span class=\"params\">(ChannelHandlerContext ctx,</span></span><br><span class=\"line\"><span class=\"params\">                                                                  RemotingCommand request)</span> <span class=\"keyword\">throws</span> RemotingCommandException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> SendMessageContext mqtraceContext;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (request.getCode()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> RequestCode.CONSUMER_SEND_MSG_BACK:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.asyncConsumerSendMsgBack(ctx, request);</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"type\">SendMessageRequestHeader</span> <span class=\"variable\">requestHeader</span> <span class=\"operator\">=</span> parseRequestHeader(request);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (requestHeader == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> CompletableFuture.completedFuture(<span class=\"literal\">null</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                mqtraceContext = buildMsgContext(ctx, requestHeader);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.executeSendMessageHookBefore(ctx, request, mqtraceContext);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (requestHeader.isBatch()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.asyncSendBatchMessage(ctx, request, mqtraceContext, requestHeader);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.asyncSendMessage(ctx, request, mqtraceContext, requestHeader);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"org-apache-rocketmq-broker-processor-SendMessageProcessor-asyncSendMessage\"><a href=\"#org-apache-rocketmq-broker-processor-SendMessageProcessor-asyncSendMessage\" class=\"headerlink\" title=\"org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncSendMessage\"></a><span id=\"SendMessageProcessor#asyncSendMessage\"><a href=\"#SendMessageProcessor#asyncSendMessage.back\">org.apache.rocketmq.broker.processor.SendMessageProcessor#asyncSendMessage</a></span></h4><p>这里主要的是关注第61行代码，进入到Strore，运行asyncPutMessage。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> CompletableFuture&lt;RemotingCommand&gt; <span class=\"title function_\">asyncSendMessage</span><span class=\"params\">(ChannelHandlerContext ctx, RemotingCommand request,</span></span><br><span class=\"line\"><span class=\"params\">                                                                SendMessageContext mqtraceContext,</span></span><br><span class=\"line\"><span class=\"params\">                                                                SendMessageRequestHeader requestHeader)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">RemotingCommand</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> preSend(ctx, request, requestHeader);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">SendMessageResponseHeader</span> <span class=\"variable\">responseHeader</span> <span class=\"operator\">=</span> (SendMessageResponseHeader)response.readCustomHeader();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response.getCode() != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> CompletableFuture.completedFuture(response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">byte</span>[] body = request.getBody();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">queueIdInt</span> <span class=\"operator\">=</span> requestHeader.getQueueId();</span><br><span class=\"line\">        <span class=\"type\">TopicConfig</span> <span class=\"variable\">topicConfig</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (queueIdInt &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            queueIdInt = randomQueueId(topicConfig.getWriteQueueNums());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">MessageExtBrokerInner</span> <span class=\"variable\">msgInner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MessageExtBrokerInner</span>();</span><br><span class=\"line\">        msgInner.setTopic(requestHeader.getTopic());</span><br><span class=\"line\">        msgInner.setQueueId(queueIdInt);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!handleRetryAndDLQ(requestHeader, response, request, msgInner, topicConfig)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> CompletableFuture.completedFuture(response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        msgInner.setBody(body);</span><br><span class=\"line\">        msgInner.setFlag(requestHeader.getFlag());</span><br><span class=\"line\">        Map&lt;String, String&gt; origProps = MessageDecoder.string2messageProperties(requestHeader.getProperties());</span><br><span class=\"line\">        MessageAccessor.setProperties(msgInner, origProps);</span><br><span class=\"line\">        msgInner.setBornTimestamp(requestHeader.getBornTimestamp());</span><br><span class=\"line\">        msgInner.setBornHost(ctx.channel().remoteAddress());</span><br><span class=\"line\">        msgInner.setStoreHost(<span class=\"built_in\">this</span>.getStoreHost());</span><br><span class=\"line\">        msgInner.setReconsumeTimes(requestHeader.getReconsumeTimes() == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : requestHeader.getReconsumeTimes());</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">clusterName</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.brokerController.getBrokerConfig().getBrokerClusterName();</span><br><span class=\"line\">        MessageAccessor.putProperty(msgInner, MessageConst.PROPERTY_CLUSTER, clusterName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (origProps.containsKey(MessageConst.PROPERTY_WAIT_STORE_MSG_OK)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// There is no need to store &quot;WAIT=true&quot;, remove it from propertiesString to save 9 bytes for each message.</span></span><br><span class=\"line\">            <span class=\"comment\">// It works for most case. In some cases msgInner.setPropertiesString invoked later and replace it.</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">waitStoreMsgOKValue</span> <span class=\"operator\">=</span> origProps.remove(MessageConst.PROPERTY_WAIT_STORE_MSG_OK);</span><br><span class=\"line\">            msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));</span><br><span class=\"line\">            <span class=\"comment\">// Reput to properties, since msgInner.isWaitStoreMsgOK() will be invoked later</span></span><br><span class=\"line\">            origProps.put(MessageConst.PROPERTY_WAIT_STORE_MSG_OK, waitStoreMsgOKValue);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgInner.getProperties()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        CompletableFuture&lt;PutMessageResult&gt; putMessageResult = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">transFlag</span> <span class=\"operator\">=</span> origProps.get(MessageConst.PROPERTY_TRANSACTION_PREPARED);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Boolean.parseBoolean(transFlag)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.brokerController.getBrokerConfig().isRejectTransactionMessage()) &#123;</span><br><span class=\"line\">                response.setCode(ResponseCode.NO_PERMISSION);</span><br><span class=\"line\">                response.setRemark(</span><br><span class=\"line\">                        <span class=\"string\">&quot;the broker[&quot;</span> + <span class=\"built_in\">this</span>.brokerController.getBrokerConfig().getBrokerIP1()</span><br><span class=\"line\">                                + <span class=\"string\">&quot;] sending transaction message is forbidden&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> CompletableFuture.completedFuture(response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            putMessageResult = <span class=\"built_in\">this</span>.brokerController.getTransactionalMessageService().asyncPrepareMessage(msgInner);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            putMessageResult = <span class=\"built_in\">this</span>.brokerController.getMessageStore().asyncPutMessage(msgInner);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handlePutMessageResultFuture(putMessageResult, response, request, msgInner, responseHeader, mqtraceContext, ctx, queueIdInt);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"org-apache-rocketmq-store-CommitLog-asyncPutMessage\"><a href=\"#org-apache-rocketmq-store-CommitLog-asyncPutMessage\" class=\"headerlink\" title=\"org.apache.rocketmq.store.CommitLog#asyncPutMessage\"></a><span id=\"CommitLog#asyncPutMessage\"><a href=\"#CommitLog#asyncPutMessage.back\">org.apache.rocketmq.store.CommitLog#asyncPutMessage</a></span></h4><p>putMessage的过程中会进行判断，主要看第十八行开始，如果是延迟mq，则会将消息放入到topic&#x3D;SCHEDULE_TOPIC_XXXX,queueId&#x3D;delayLevel-1中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> CompletableFuture&lt;PutMessageResult&gt; <span class=\"title function_\">asyncPutMessage</span><span class=\"params\">(<span class=\"keyword\">final</span> MessageExtBrokerInner msg)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Set the storage time</span></span><br><span class=\"line\">        msg.setStoreTimestamp(System.currentTimeMillis());</span><br><span class=\"line\">        <span class=\"comment\">// Set the message body BODY CRC (consider the most appropriate setting</span></span><br><span class=\"line\">        <span class=\"comment\">// on the client)</span></span><br><span class=\"line\">        msg.setBodyCRC(UtilAll.crc32(msg.getBody()));</span><br><span class=\"line\">        <span class=\"comment\">// Back to Results</span></span><br><span class=\"line\">        <span class=\"type\">AppendMessageResult</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">StoreStatsService</span> <span class=\"variable\">storeStatsService</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.defaultMessageStore.getStoreStatsService();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">topic</span> <span class=\"operator\">=</span> msg.getTopic();</span><br><span class=\"line\"><span class=\"comment\">//        int queueId msg.getQueueId();</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">tranType</span> <span class=\"operator\">=</span> MessageSysFlag.getTransactionValue(msg.getSysFlag());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tranType == MessageSysFlag.TRANSACTION_NOT_TYPE</span><br><span class=\"line\">                || tranType == MessageSysFlag.TRANSACTION_COMMIT_TYPE) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Delay Delivery</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (msg.getDelayTimeLevel() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (msg.getDelayTimeLevel() &gt; <span class=\"built_in\">this</span>.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel()) &#123;</span><br><span class=\"line\">                    msg.setDelayTimeLevel(<span class=\"built_in\">this</span>.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                topic = TopicValidator.RMQ_SYS_SCHEDULE_TOPIC;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">queueId</span> <span class=\"operator\">=</span> ScheduleMessageService.delayLevel2QueueId(msg.getDelayTimeLevel());</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Backup real topic, queueId</span></span><br><span class=\"line\">                MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_TOPIC, msg.getTopic());</span><br><span class=\"line\">                MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_QUEUE_ID, String.valueOf(msg.getQueueId()));</span><br><span class=\"line\">                msg.setPropertiesString(MessageDecoder.messageProperties2String(msg.getProperties()));</span><br><span class=\"line\"></span><br><span class=\"line\">                msg.setTopic(topic);</span><br><span class=\"line\">                msg.setQueueId(queueId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">InetSocketAddress</span> <span class=\"variable\">bornSocketAddress</span> <span class=\"operator\">=</span> (InetSocketAddress) msg.getBornHost();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bornSocketAddress.getAddress() <span class=\"keyword\">instanceof</span> Inet6Address) &#123;</span><br><span class=\"line\">            msg.setBornHostV6Flag();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">InetSocketAddress</span> <span class=\"variable\">storeSocketAddress</span> <span class=\"operator\">=</span> (InetSocketAddress) msg.getStoreHost();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (storeSocketAddress.getAddress() <span class=\"keyword\">instanceof</span> Inet6Address) &#123;</span><br><span class=\"line\">            msg.setStoreHostAddressV6Flag();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">PutMessageThreadLocal</span> <span class=\"variable\">putMessageThreadLocal</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.putMessageThreadLocal.get();</span><br><span class=\"line\">        updateMaxMessageSize(putMessageThreadLocal);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!multiDispatch.isMultiDispatchMsg(msg)) &#123;</span><br><span class=\"line\">            <span class=\"type\">PutMessageResult</span> <span class=\"variable\">encodeResult</span> <span class=\"operator\">=</span> putMessageThreadLocal.getEncoder().encode(msg);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (encodeResult != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> CompletableFuture.completedFuture(encodeResult);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            msg.setEncodedBuff(putMessageThreadLocal.getEncoder().getEncoderBuffer());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">PutMessageContext</span> <span class=\"variable\">putMessageContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PutMessageContext</span>(generateKey(putMessageThreadLocal.getKeyBuilder(), msg));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">elapsedTimeInLock</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">MappedFile</span> <span class=\"variable\">unlockMappedFile</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        putMessageLock.lock(); <span class=\"comment\">//spin or ReentrantLock ,depending on store config</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">MappedFile</span> <span class=\"variable\">mappedFile</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mappedFileQueue.getLastMappedFile();</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">beginLockTimestamp</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.defaultMessageStore.getSystemClock().now();</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.beginTimeInLock = beginLockTimestamp;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Here settings are stored timestamp, in order to ensure an orderly</span></span><br><span class=\"line\">            <span class=\"comment\">// global</span></span><br><span class=\"line\">            msg.setStoreTimestamp(beginLockTimestamp);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == mappedFile || mappedFile.isFull()) &#123;</span><br><span class=\"line\">                mappedFile = <span class=\"built_in\">this</span>.mappedFileQueue.getLastMappedFile(<span class=\"number\">0</span>); <span class=\"comment\">// Mark: NewFile may be cause noise</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == mappedFile) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;create mapped file1 error, topic: &quot;</span> + msg.getTopic() + <span class=\"string\">&quot; clientAddr: &quot;</span> + msg.getBornHostString());</span><br><span class=\"line\">                <span class=\"keyword\">return</span> CompletableFuture.completedFuture(<span class=\"keyword\">new</span> <span class=\"title class_\">PutMessageResult</span>(PutMessageStatus.CREATE_MAPEDFILE_FAILED, <span class=\"literal\">null</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            result = mappedFile.appendMessage(msg, <span class=\"built_in\">this</span>.appendMessageCallback, putMessageContext);</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (result.getStatus()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> PUT_OK:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> END_OF_FILE:</span><br><span class=\"line\">                    unlockMappedFile = mappedFile;</span><br><span class=\"line\">                    <span class=\"comment\">// Create a new file, re-write the message</span></span><br><span class=\"line\">                    mappedFile = <span class=\"built_in\">this</span>.mappedFileQueue.getLastMappedFile(<span class=\"number\">0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == mappedFile) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// <span class=\"doctag\">XXX:</span> warn and notify me</span></span><br><span class=\"line\">                        log.error(<span class=\"string\">&quot;create mapped file2 error, topic: &quot;</span> + msg.getTopic() + <span class=\"string\">&quot; clientAddr: &quot;</span> + msg.getBornHostString());</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> CompletableFuture.completedFuture(<span class=\"keyword\">new</span> <span class=\"title class_\">PutMessageResult</span>(PutMessageStatus.CREATE_MAPEDFILE_FAILED, result));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    result = mappedFile.appendMessage(msg, <span class=\"built_in\">this</span>.appendMessageCallback, putMessageContext);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> MESSAGE_SIZE_EXCEEDED:</span><br><span class=\"line\">                <span class=\"keyword\">case</span> PROPERTIES_SIZE_EXCEEDED:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> CompletableFuture.completedFuture(<span class=\"keyword\">new</span> <span class=\"title class_\">PutMessageResult</span>(PutMessageStatus.MESSAGE_ILLEGAL, result));</span><br><span class=\"line\">                <span class=\"keyword\">case</span> UNKNOWN_ERROR:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> CompletableFuture.completedFuture(<span class=\"keyword\">new</span> <span class=\"title class_\">PutMessageResult</span>(PutMessageStatus.UNKNOWN_ERROR, result));</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> CompletableFuture.completedFuture(<span class=\"keyword\">new</span> <span class=\"title class_\">PutMessageResult</span>(PutMessageStatus.UNKNOWN_ERROR, result));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            elapsedTimeInLock = <span class=\"built_in\">this</span>.defaultMessageStore.getSystemClock().now() - beginLockTimestamp;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            beginTimeInLock = <span class=\"number\">0</span>;</span><br><span class=\"line\">            putMessageLock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elapsedTimeInLock &gt; <span class=\"number\">500</span>) &#123;</span><br><span class=\"line\">            log.warn(<span class=\"string\">&quot;[NOTIFYME]putMessage in lock cost time(ms)=&#123;&#125;, bodyLength=&#123;&#125; AppendMessageResult=&#123;&#125;&quot;</span>, elapsedTimeInLock, msg.getBody().length, result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != unlockMappedFile &amp;&amp; <span class=\"built_in\">this</span>.defaultMessageStore.getMessageStoreConfig().isWarmMapedFileEnable()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.defaultMessageStore.unlockMappedFile(unlockMappedFile);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">PutMessageResult</span> <span class=\"variable\">putMessageResult</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PutMessageResult</span>(PutMessageStatus.PUT_OK, result);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Statistics</span></span><br><span class=\"line\">        storeStatsService.getSinglePutMessageTopicTimesTotal(msg.getTopic()).add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        storeStatsService.getSinglePutMessageTopicSizeTotal(topic).add(result.getWroteBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">        CompletableFuture&lt;PutMessageStatus&gt; flushResultFuture = submitFlushRequest(result, msg);</span><br><span class=\"line\">        CompletableFuture&lt;PutMessageStatus&gt; replicaResultFuture = submitReplicaRequest(result, msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flushResultFuture.thenCombine(replicaResultFuture, (flushStatus, replicaStatus) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flushStatus != PutMessageStatus.PUT_OK) &#123;</span><br><span class=\"line\">                putMessageResult.setPutMessageStatus(flushStatus);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (replicaStatus != PutMessageStatus.PUT_OK) &#123;</span><br><span class=\"line\">                putMessageResult.setPutMessageStatus(replicaStatus);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> putMessageResult;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"org-apache-rocketmq-store-schedule-ScheduleMessageService-start\"><a href=\"#org-apache-rocketmq-store-schedule-ScheduleMessageService-start\" class=\"headerlink\" title=\"org.apache.rocketmq.store.schedule.ScheduleMessageService#start\"></a><span id=\"ScheduleMessageService#start\"><a href=\"#ScheduleMessageService#start.back\">org.apache.rocketmq.store.schedule.ScheduleMessageService#start</a></span></h4><p>这里主要是解释schedule对每一个delayLevel都启动了一个定时任务线程，执行频率根据不同delayLevel对应的deladeliveryTime决定。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (started.compareAndSet(<span class=\"literal\">false</span>, <span class=\"literal\">true</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.load();</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.deliverExecutorService = <span class=\"keyword\">new</span> <span class=\"title class_\">ScheduledThreadPoolExecutor</span>(<span class=\"built_in\">this</span>.maxDelayLevel, <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadFactoryImpl</span>(<span class=\"string\">&quot;ScheduleMessageTimerThread_&quot;</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.enableAsyncDeliver) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.handleExecutorService = <span class=\"keyword\">new</span> <span class=\"title class_\">ScheduledThreadPoolExecutor</span>(<span class=\"built_in\">this</span>.maxDelayLevel, <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadFactoryImpl</span>(<span class=\"string\">&quot;ScheduleMessageExecutorHandleThread_&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Map.Entry&lt;Integer, Long&gt; entry : <span class=\"built_in\">this</span>.delayLevelTable.entrySet()) &#123;</span><br><span class=\"line\">                <span class=\"type\">Integer</span> <span class=\"variable\">level</span> <span class=\"operator\">=</span> entry.getKey();</span><br><span class=\"line\">                <span class=\"type\">Long</span> <span class=\"variable\">timeDelay</span> <span class=\"operator\">=</span> entry.getValue();</span><br><span class=\"line\">                <span class=\"type\">Long</span> <span class=\"variable\">offset</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.offsetTable.get(level);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == offset) &#123;</span><br><span class=\"line\">                    offset = <span class=\"number\">0L</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (timeDelay != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.enableAsyncDeliver) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.handleExecutorService.schedule(<span class=\"keyword\">new</span> <span class=\"title class_\">HandlePutResultTask</span>(level), FIRST_DELAY_TIME, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.deliverExecutorService.schedule(<span class=\"keyword\">new</span> <span class=\"title class_\">DeliverDelayedMessageTimerTask</span>(level, offset), FIRST_DELAY_TIME, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.deliverExecutorService.scheduleAtFixedRate(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (started.get()) &#123;</span><br><span class=\"line\">                            ScheduleMessageService.<span class=\"built_in\">this</span>.persist();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                        log.error(<span class=\"string\">&quot;scheduleAtFixedRate flush exception&quot;</span>, e);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"number\">10000</span>, <span class=\"built_in\">this</span>.defaultMessageStore.getMessageStoreConfig().getFlushDelayOffsetInterval(), TimeUnit.MILLISECONDS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"org-apache-rocketmq-store-schedule-ScheduleMessageService-DeliverDelayedMessageTimerTask\"><a href=\"#org-apache-rocketmq-store-schedule-ScheduleMessageService-DeliverDelayedMessageTimerTask\" class=\"headerlink\" title=\"org.apache.rocketmq.store.schedule.ScheduleMessageService.DeliverDelayedMessageTimerTask\"></a><span id=\"DeliverDelayedMessageTimerTask\"><a href=\"#DeliverDelayedMessageTimerTask.back\">org.apache.rocketmq.store.schedule.ScheduleMessageService.DeliverDelayedMessageTimerTask</a></span></h4><p>task主要的任务就是101行，调用org.apache.rocketmq.store.schedule.ScheduleMessageService#messageTimeup，将对象转换成MessageExtBrokerInner对象（并在此时将topic和queueId重置成原来的），然后调用org.apache.rocketmq.store.DefaultMessageStore#putMessage，将消息放入到commitLog中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DeliverDelayedMessageTimerTask</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> delayLevel;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> offset;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">DeliverDelayedMessageTimerTask</span><span class=\"params\">(<span class=\"type\">int</span> delayLevel, <span class=\"type\">long</span> offset)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.delayLevel = delayLevel;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.offset = offset;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isStarted()) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">this</span>.executeOnTimeup();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// <span class=\"doctag\">XXX:</span> warn and notify me</span></span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;ScheduleMessageService, executeOnTimeup exception&quot;</span>, e);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.scheduleNextTimerTask(<span class=\"built_in\">this</span>.offset, DELAY_FOR_A_PERIOD);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">long</span> <span class=\"title function_\">correctDeliverTimestamp</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">long</span> now, <span class=\"keyword\">final</span> <span class=\"type\">long</span> deliverTimestamp)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> deliverTimestamp;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">maxTimestamp</span> <span class=\"operator\">=</span> now + ScheduleMessageService.<span class=\"built_in\">this</span>.delayLevelTable.get(<span class=\"built_in\">this</span>.delayLevel);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (deliverTimestamp &gt; maxTimestamp) &#123;</span><br><span class=\"line\">                result = now;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">executeOnTimeup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">ConsumeQueue</span> <span class=\"variable\">cq</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                ScheduleMessageService.<span class=\"built_in\">this</span>.defaultMessageStore.findConsumeQueue(TopicValidator.RMQ_SYS_SCHEDULE_TOPIC,</span><br><span class=\"line\">                    delayLevel2QueueId(delayLevel));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cq == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.scheduleNextTimerTask(<span class=\"built_in\">this</span>.offset, DELAY_FOR_A_WHILE);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">SelectMappedBufferResult</span> <span class=\"variable\">bufferCQ</span> <span class=\"operator\">=</span> cq.getIndexBuffer(<span class=\"built_in\">this</span>.offset);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bufferCQ == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">long</span> resetOffset;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((resetOffset = cq.getMinOffsetInQueue()) &gt; <span class=\"built_in\">this</span>.offset) &#123;</span><br><span class=\"line\">                    log.error(<span class=\"string\">&quot;schedule CQ offset invalid. offset=&#123;&#125;, cqMinOffset=&#123;&#125;, queueId=&#123;&#125;&quot;</span>,</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.offset, resetOffset, cq.getQueueId());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((resetOffset = cq.getMaxOffsetInQueue()) &lt; <span class=\"built_in\">this</span>.offset) &#123;</span><br><span class=\"line\">                    log.error(<span class=\"string\">&quot;schedule CQ offset invalid. offset=&#123;&#125;, cqMaxOffset=&#123;&#125;, queueId=&#123;&#125;&quot;</span>,</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.offset, resetOffset, cq.getQueueId());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resetOffset = <span class=\"built_in\">this</span>.offset;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">this</span>.scheduleNextTimerTask(resetOffset, DELAY_FOR_A_WHILE);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">nextOffset</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.offset;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                ConsumeQueueExt.<span class=\"type\">CqExtUnit</span> <span class=\"variable\">cqExtUnit</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConsumeQueueExt</span>.CqExtUnit();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (; i &lt; bufferCQ.getSize() &amp;&amp; isStarted(); i += ConsumeQueue.CQ_STORE_UNIT_SIZE) &#123;</span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"variable\">offsetPy</span> <span class=\"operator\">=</span> bufferCQ.getByteBuffer().getLong();</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">sizePy</span> <span class=\"operator\">=</span> bufferCQ.getByteBuffer().getInt();</span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"variable\">tagsCode</span> <span class=\"operator\">=</span> bufferCQ.getByteBuffer().getLong();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cq.isExtAddr(tagsCode)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (cq.getExt(tagsCode, cqExtUnit)) &#123;</span><br><span class=\"line\">                            tagsCode = cqExtUnit.getTagsCode();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//can&#x27;t find ext content.So re compute tags code.</span></span><br><span class=\"line\">                            log.error(<span class=\"string\">&quot;[BUG] can&#x27;t find consume queue extend file content!addr=&#123;&#125;, offsetPy=&#123;&#125;, sizePy=&#123;&#125;&quot;</span>,</span><br><span class=\"line\">                                tagsCode, offsetPy, sizePy);</span><br><span class=\"line\">                            <span class=\"type\">long</span> <span class=\"variable\">msgStoreTime</span> <span class=\"operator\">=</span> defaultMessageStore.getCommitLog().pickupStoreTimestamp(offsetPy, sizePy);</span><br><span class=\"line\">                            tagsCode = computeDeliverTimestamp(delayLevel, msgStoreTime);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"variable\">deliverTimestamp</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.correctDeliverTimestamp(now, tagsCode);</span><br><span class=\"line\">                    nextOffset = offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"variable\">countdown</span> <span class=\"operator\">=</span> deliverTimestamp - now;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (countdown &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.scheduleNextTimerTask(nextOffset, DELAY_FOR_A_WHILE);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">MessageExt</span> <span class=\"variable\">msgExt</span> <span class=\"operator\">=</span> ScheduleMessageService.<span class=\"built_in\">this</span>.defaultMessageStore.lookMessageByOffset(offsetPy, sizePy);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (msgExt == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">MessageExtBrokerInner</span> <span class=\"variable\">msgInner</span> <span class=\"operator\">=</span> ScheduleMessageService.<span class=\"built_in\">this</span>.messageTimeup(msgExt);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (TopicValidator.RMQ_SYS_TRANS_HALF_TOPIC.equals(msgInner.getTopic())) &#123;</span><br><span class=\"line\">                        log.error(<span class=\"string\">&quot;[BUG] the real topic of schedule msg is &#123;&#125;, discard the msg. msg=&#123;&#125;&quot;</span>,</span><br><span class=\"line\">                            msgInner.getTopic(), msgInner);</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"type\">boolean</span> deliverSuc;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ScheduleMessageService.<span class=\"built_in\">this</span>.enableAsyncDeliver) &#123;</span><br><span class=\"line\">                        deliverSuc = <span class=\"built_in\">this</span>.asyncDeliver(msgInner, msgExt.getMsgId(), nextOffset, offsetPy, sizePy);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        deliverSuc = <span class=\"built_in\">this</span>.syncDeliver(msgInner, msgExt.getMsgId(), nextOffset, offsetPy, sizePy);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!deliverSuc) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">this</span>.scheduleNextTimerTask(nextOffset, DELAY_FOR_A_WHILE);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                nextOffset = <span class=\"built_in\">this</span>.offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;ScheduleMessageService, messageTimeup execute error, offset = &#123;&#125;&quot;</span>, nextOffset, e);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                bufferCQ.release();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.scheduleNextTimerTask(nextOffset, DELAY_FOR_A_WHILE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">scheduleNextTimerTask</span><span class=\"params\">(<span class=\"type\">long</span> offset, <span class=\"type\">long</span> delay)</span> &#123;</span><br><span class=\"line\">            ScheduleMessageService.<span class=\"built_in\">this</span>.deliverExecutorService.schedule(<span class=\"keyword\">new</span> <span class=\"title class_\">DeliverDelayedMessageTimerTask</span>(</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.delayLevel, offset), delay, TimeUnit.MILLISECONDS);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">syncDeliver</span><span class=\"params\">(MessageExtBrokerInner msgInner, String msgId, <span class=\"type\">long</span> offset, <span class=\"type\">long</span> offsetPy,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"type\">int</span> sizePy)</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">PutResultProcess</span> <span class=\"variable\">resultProcess</span> <span class=\"operator\">=</span> deliverMessage(msgInner, msgId, offset, offsetPy, sizePy, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"type\">PutMessageResult</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> resultProcess.get();</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">sendStatus</span> <span class=\"operator\">=</span> result != <span class=\"literal\">null</span> &amp;&amp; result.getPutMessageStatus() == PutMessageStatus.PUT_OK;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sendStatus) &#123;</span><br><span class=\"line\">                ScheduleMessageService.<span class=\"built_in\">this</span>.updateOffset(<span class=\"built_in\">this</span>.delayLevel, resultProcess.getNextOffset());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sendStatus;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">asyncDeliver</span><span class=\"params\">(MessageExtBrokerInner msgInner, String msgId, <span class=\"type\">long</span> offset, <span class=\"type\">long</span> offsetPy,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"type\">int</span> sizePy)</span> &#123;</span><br><span class=\"line\">            Queue&lt;PutResultProcess&gt; processesQueue = ScheduleMessageService.<span class=\"built_in\">this</span>.deliverPendingTable.get(<span class=\"built_in\">this</span>.delayLevel);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//Flow Control</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">currentPendingNum</span> <span class=\"operator\">=</span> processesQueue.size();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">maxPendingLimit</span> <span class=\"operator\">=</span> ScheduleMessageService.<span class=\"built_in\">this</span>.defaultMessageStore.getMessageStoreConfig()</span><br><span class=\"line\">                .getScheduleAsyncDeliverMaxPendingLimit();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (currentPendingNum &gt; maxPendingLimit) &#123;</span><br><span class=\"line\">                log.warn(<span class=\"string\">&quot;Asynchronous deliver triggers flow control, &quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;currentPendingNum=&#123;&#125;, maxPendingLimit=&#123;&#125;&quot;</span>, currentPendingNum, maxPendingLimit);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//Blocked</span></span><br><span class=\"line\">            <span class=\"type\">PutResultProcess</span> <span class=\"variable\">firstProcess</span> <span class=\"operator\">=</span> processesQueue.peek();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (firstProcess != <span class=\"literal\">null</span> &amp;&amp; firstProcess.need2Blocked()) &#123;</span><br><span class=\"line\">                log.warn(<span class=\"string\">&quot;Asynchronous deliver block. info=&#123;&#125;&quot;</span>, firstProcess.toString());</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">PutResultProcess</span> <span class=\"variable\">resultProcess</span> <span class=\"operator\">=</span> deliverMessage(msgInner, msgId, offset, offsetPy, sizePy, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            processesQueue.add(resultProcess);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> PutResultProcess <span class=\"title function_\">deliverMessage</span><span class=\"params\">(MessageExtBrokerInner msgInner, String msgId, <span class=\"type\">long</span> offset,</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"type\">long</span> offsetPy, <span class=\"type\">int</span> sizePy, <span class=\"type\">boolean</span> autoResend)</span> &#123;</span><br><span class=\"line\">            CompletableFuture&lt;PutMessageResult&gt; future =</span><br><span class=\"line\">                ScheduleMessageService.<span class=\"built_in\">this</span>.writeMessageStore.asyncPutMessage(msgInner);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PutResultProcess</span>()</span><br><span class=\"line\">                .setTopic(msgInner.getTopic())</span><br><span class=\"line\">                .setDelayLevel(<span class=\"built_in\">this</span>.delayLevel)</span><br><span class=\"line\">                .setOffset(offset)</span><br><span class=\"line\">                .setPhysicOffset(offsetPy)</span><br><span class=\"line\">                .setPhysicSize(sizePy)</span><br><span class=\"line\">                .setMsgId(msgId)</span><br><span class=\"line\">                .setAutoResend(autoResend)</span><br><span class=\"line\">                .setFuture(future)</span><br><span class=\"line\">                .thenProcess();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RocketMQ-5-X的延时MQ现状-官方文档\"><a href=\"#RocketMQ-5-X的延时MQ现状-官方文档\" class=\"headerlink\" title=\" RocketMQ 5.X的延时MQ现状  官方文档\"></a><span id=\"rocketMQ5.x-now\"> RocketMQ 5.X的延时MQ现状 </span> <a href=\"https://rocketmq.apache.org/zh/docs/featureBehavior/02delaymessage\">官方文档</a></h3><ul>\n<li>字段message.deliveryTimestamp</li>\n<li>可以预定触发的时间戳，而不是延时时长</li>\n<li>支持以格式为毫秒级unix时间戳（默认1000毫秒的精度也就是1秒）</li>\n<li>支持最长24小时，不支持自定义修改，超过24小时延时不生效，服务端会立即投递</li>\n<li>定时任务仅支持发送到MessageType为Delay的Topic中</li>\n</ul>\n<h3 id=\"RocketMQ-5-X的延时MQ原理解析\"><a href=\"#RocketMQ-5-X的延时MQ原理解析\" class=\"headerlink\" title=\" RocketMQ 5.X的延时MQ原理解析 \"></a><span id=\"rocketMQ5.x-principle\"> RocketMQ 5.X的延时MQ原理解析 </span></h3><h3 id=\"RocketMQ-5-X的延时MQ源码解析\"><a href=\"#RocketMQ-5-X的延时MQ源码解析\" class=\"headerlink\" title=\" RocketMQ 5.X的延时MQ源码解析 \"></a><span id=\"rocketMQ5.x-code\"> RocketMQ 5.X的延时MQ源码解析 </span></h3><h4 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\" 写在最后 \"></a><span id=\"write-end\"> 写在最后 </span></h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在2025年09月18日，心血来潮在github上搜索rocketMQ的延迟mq，发现了2018年的一些点点滴滴。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有自己为了学习ai并作为毕设的仓库，有同学带我玩的hexo + github实现的简单个人博客。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在看完文档和代码之后百感交集，终于打算重新开始写博客。不知道这次还能坚持多久，但是既然自己能一口气减肥掉了43斤（截至目前），那么还有什么不能的呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加油吧自己，在没有目标的时候好好积累，厚积薄发。</p>\n"},{"title":"todo_list","_content":"# rocketMQ\n1.rocketMQ延时mq\n2.rocketMQ顺序mq\n3.rocketMQ批量mq\n4.rocketMQ事务mq\n5.rocketMQ发送重试&流控制\n6.rocketMQ消费重试\n7.负载均衡\n8.消费者分类\n\n# dubbo\n\n# seate","source":"_drafts/todo-list.md","raw":"---\ntitle: todo_list\ntags: todo\n---\n# rocketMQ\n1.rocketMQ延时mq\n2.rocketMQ顺序mq\n3.rocketMQ批量mq\n4.rocketMQ事务mq\n5.rocketMQ发送重试&流控制\n6.rocketMQ消费重试\n7.负载均衡\n8.消费者分类\n\n# dubbo\n\n# seate","slug":"todo-list","published":0,"date":"2025-09-19T13:49:26.508Z","updated":"2025-09-19T13:52:56.593Z","_id":"cmfqwbur5000078u7879vflm7","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"rocketMQ\"><a href=\"#rocketMQ\" class=\"headerlink\" title=\"rocketMQ\"></a>rocketMQ</h1><p>1.rocketMQ延时mq<br>2.rocketMQ顺序mq<br>3.rocketMQ批量mq<br>4.rocketMQ事务mq<br>5.rocketMQ发送重试&amp;流控制<br>6.rocketMQ消费重试<br>7.负载均衡<br>8.消费者分类</p>\n<h1 id=\"dubbo\"><a href=\"#dubbo\" class=\"headerlink\" title=\"dubbo\"></a>dubbo</h1><h1 id=\"seate\"><a href=\"#seate\" class=\"headerlink\" title=\"seate\"></a>seate</h1>","excerpt":"","more":"<h1 id=\"rocketMQ\"><a href=\"#rocketMQ\" class=\"headerlink\" title=\"rocketMQ\"></a>rocketMQ</h1><p>1.rocketMQ延时mq<br>2.rocketMQ顺序mq<br>3.rocketMQ批量mq<br>4.rocketMQ事务mq<br>5.rocketMQ发送重试&amp;流控制<br>6.rocketMQ消费重试<br>7.负载均衡<br>8.消费者分类</p>\n<h1 id=\"dubbo\"><a href=\"#dubbo\" class=\"headerlink\" title=\"dubbo\"></a>dubbo</h1><h1 id=\"seate\"><a href=\"#seate\" class=\"headerlink\" title=\"seate\"></a>seate</h1>"}],"PostAsset":[],"PostCategory":[{"post_id":"cmfqa7j9n0000k4u7eg5zauep","category_id":"cmfqa7j9q0001k4u7dcu13wqm","_id":"cmfqa7j9s0004k4u71rb1bsov"},{"post_id":"cmfqf6qtj0000kgu7a8n8a6iz","category_id":"cmfqf6qtl0001kgu7gr5da4wd","_id":"cmfqf6qto0007kgu76qx8c6x8"},{"post_id":"cmfqf6qtj0000kgu7a8n8a6iz","category_id":"cmfqf6qtn0004kgu77vo0bvzo","_id":"cmfqf6qto0008kgu75n86f9sl"}],"PostTag":[{"post_id":"cmfqa7j9n0000k4u7eg5zauep","tag_id":"cmfqa7j9r0002k4u70auagg1n","_id":"cmfqa7j9s0005k4u7d49ehavl"},{"post_id":"cmfqf6qtj0000kgu7a8n8a6iz","tag_id":"cmfqaawrm00002wu77uhfcxgw","_id":"cmfqf6qto0009kgu764z43yie"},{"post_id":"cmfqf6qtj0000kgu7a8n8a6iz","tag_id":"cmfqf6qtm0002kgu73imk89wb","_id":"cmfqf6qto000akgu72p5me3ha"},{"post_id":"cmfqf6qtj0000kgu7a8n8a6iz","tag_id":"cmfqf6qtn0003kgu7c2g94w08","_id":"cmfqf6qto000bkgu76vinfgf6"},{"post_id":"cmfqf6qtj0000kgu7a8n8a6iz","tag_id":"cmfqf6qto0005kgu75wq71oi4","_id":"cmfqf6qto000ckgu73nj6ay5b"},{"post_id":"cmfqf6qtj0000kgu7a8n8a6iz","tag_id":"cmfqf6qto0006kgu707qubog9","_id":"cmfqf6qto000dkgu712d68l5s"},{"post_id":"cmfqf6qtj0000kgu7a8n8a6iz","tag_id":"cmfqqo8zy000ekgu76meofylz","_id":"cmfqrejjx000gkgu79k7i9tw2"}],"Tag":[{"name":"Hexo","_id":"cmfqa7j9r0002k4u70auagg1n"},{"name":"博客","_id":"cmfqa7j9s0003k4u79i6p9yvi"},{"name":"Java","_id":"cmfqaawrm00002wu77uhfcxgw"},{"name":"Python","_id":"cmfqaawrn00012wu71h5vbcx2"},{"name":"AI","_id":"cmfqaawrn00022wu78t4fgs0c"},{"name":"RocketMQ","_id":"cmfqf6qtm0002kgu73imk89wb"},{"name":"分布式","_id":"cmfqf6qtn0003kgu7c2g94w08"},{"name":"架构","_id":"cmfqf6qto0005kgu75wq71oi4"},{"name":"消息队列","_id":"cmfqf6qto0006kgu707qubog9"},{"name":"源码","_id":"cmfqqo8zy000ekgu76meofylz"}]}}